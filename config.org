#+title: 我的Emacs配置
#+author: keke
#+email: liushike1997@gmail.com
#+date: <2020-04-17 Fri>
#+export_file_name: ~/keke-cute.github.io/blog/myemacsconf.html
#+options: creator:t author:t
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/m-dark.css" />
#+HTML_HEAD_EXTRA: <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Code+Pro:400,400i,600%7CSource+Sans+Pro:400,400i,600&amp;subset=latin-ext" />
#+HTML_HEAD_EXTRA: <meta name="viewport" content="width=device-width, initial-scale=1.0" />
#+OPTIONS: html-style:nil
* Straight.el
  #+begin_src emacs-lisp
    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))
  #+end_src
  #+begin_src emacs-lisp
    (straight-use-package 'use-package)
    (straight-use-package 'magit)
    (straight-use-package 'markdown-mode)
  #+end_src
* Is A?
  #+begin_src emacs-lisp
    (defconst *is-a-mac* (eq system-type 'darwin))
    (defconst *is-a-linux* (eq system-type 'gnu/linux))
  #+end_src
* Is graphic?
  #+begin_src emacs-lisp
    (defun graphic-p ()
      (display-graphic-p))
  #+end_src
* UI
  #+begin_src emacs-lisp
    (when (graphic-p) 
      (scroll-bar-mode -1)
      (global-linum-mode 1)
      (tool-bar-mode -1)
      (setq org-startup-with-inline-images t)
      (setq initial-frame-alist
	    '(
	      (width . 106)
	      (height . 56)
	      ))
      (straight-use-package 'poke-line)
      (use-package poke-line
	:config
	(poke-line-mode 1)
	(poke-line-set-pokemon "gengar")
	(setq poke-line-bar-length 10)))
    (display-time-mode 1)
    ;; 字体设置
    (when (graphic-p)
      (when *is-a-mac*
	(let ((emacs-font-size 14)
	      (emacs-font-name "Monaco"))
	  (set-frame-font (format "%s-%s" (eval emacs-font-name) (eval emacs-font-size)))
	  (set-fontset-font (frame-parameter nil 'font) 'unicode (eval emacs-font-name)))

	(with-eval-after-load 'org
	  (defun org-buffer-face-mode-variable ()
	    (interactive)
	    (make-face 'width-font-face)
	    (set-face-attribute 'width-font-face nil :font "Sarasa Mono SC 15")
	    (setq buffer-face-mode-face 'width-font-face)
	    (buffer-face-mode))

	  (add-hook 'org-mode-hook 'org-buffer-face-mode-variable))))
  #+end_src
* Editor
  #+begin_src emacs-lisp
    ;; 自动加载外部修改过的文件
    (global-auto-revert-mode 1)
    ;; 关闭自己生产的保存文件
    (setq auto-save-default nil)
    ;; 关闭自己生产的备份文件
    (setq make-backup-files nil)
    ;; 选中某个区域继续编辑可以替换掉该区域
    (delete-selection-mode 1)
    ;; 设置h 文件默认为c++文件
    (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
    ;; orgmode
    (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
    ;; without lock files
    (setq create-lockfiles nil)
    ;; y-or-n
    (fset 'yes-or-no-p 'y-or-n-p)
  #+end_src
* Package
** Eaf
   #+begin_src emacs-lisp
     (when (graphic-p)
       (when *is-a-linux*
	 (use-package eaf
	   :load-path "~/src/emacs-application-framework" ; Set to "/usr/share/emacs/site-lisp/eaf" if installed from AUR
	   :custom
	   (eaf-find-alternate-file-in-dired t)
	   :config
	   (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
	   (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
	   (eaf-bind-key take_photo "p" eaf-camera-keybinding))))
   #+end_src
** Roam
   #+begin_src emacs-lisp
     (straight-use-package 'org-roam)
     (straight-use-package 'org-roam-server)
     (use-package org-roam
       :hook
       (after-init . org-roam-mode)
       :custom
       (org-roam-directory "~/src/org/roam")
       :bind (:map org-roam-mode-map
		   (("C-c n l" . org-roam)
		    ("C-c n f" . org-roam-find-file)
		    ("C-c n g" . org-roam-graph-show))
		   :map org-mode-map
		   (("C-c n i" . org-roam-insert))
		   (("C-c n I" . org-roam-insert-immediate))))
     (use-package org-roam-server
       :config
       (setq org-roam-server-host "127.0.0.1"
	   org-roam-server-port 9090
	   org-roam-server-export-inline-images t
	   org-roam-server-authenticate nil
	   org-roam-server-label-truncate t
	   org-roam-server-label-truncate-length 60
	   org-roam-server-label-wrap-length 20)
       (org-roam-server-mode)
       (require 'org-roam-protocol))
   #+end_src
** Which-key
   #+begin_src emacs-lisp
     (straight-use-package 'which-key)
     (use-package which-key
       :config
       (which-key-mode))
   #+end_src
** emacs-rime
   #+begin_src emacs-lisp
     (when (graphic-p)
       (when *is-a-linux*
	 (use-package rime
	   :straight (rime :type git
			   :host github
			   :repo "DogLooksGood/emacs-rime"
			   :files ("*.el" "Makefile" "lib.c"))
	   :custom
	   (default-input-method "rime")
	   (rime-show-candidate 'posframe))))
   #+end_src
** sudo-save
   #+begin_src emacs-lisp
     (defun sudo-save ()
       (interactive)
       (if (not buffer-file-name)
	   (write-file (concat "/sudo:root@localhost:" (ido-read-file-name "File:")))
	 (write-file (concat "/sudo:root@localhost:" buffer-file-name))))
   #+end_src
