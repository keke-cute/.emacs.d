#+title: ÊàëÁöÑEmacsÈÖçÁΩÆ
#+author: keke
#+email: liushike1997@gmail.com
#+date: <2020-04-17 Fri>
#+export_file_name: ~/keke-cute.github.io/blog/myemacsconf.html
#+options: creator:t author:t
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/m-dark.css" />
#+HTML_HEAD_EXTRA: <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Code+Pro:400,400i,600%7CSource+Sans+Pro:400,400i,600&amp;subset=latin-ext" />
#+HTML_HEAD_EXTRA: <meta name="viewport" content="width=device-width, initial-scale=1.0" />
#+OPTIONS: html-style:nil
* Straight.el
  #+begin_src emacs-lisp
    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))
  #+end_src
  #+begin_src emacs-lisp
    (straight-use-package 'use-package)
    (straight-use-package 'posframe)
    (straight-use-package 'vterm)
    (straight-use-package 'typescript-mode)
    (straight-use-package 'htmlize)
  #+end_src
* Is A?
  #+begin_src emacs-lisp
    (defconst *is-a-mac* (eq system-type 'darwin))
    (defconst *is-a-linux* (eq system-type 'gnu/linux))
  #+end_src
* Is graphic?
  #+begin_src emacs-lisp
    (defun graphic-p ()
      (display-graphic-p))
  #+end_src
* UI
  #+begin_src emacs-lisp
    (when (graphic-p) 
      (menu-bar-mode -1)
      (tool-bar-mode -1)
      (scroll-bar-mode -1)
      (global-linum-mode 1))
    ;;(setq inhibit-startup-message t)
    ;;(global-hl-line-mode t))
    ;;Â≠ó‰Ωì
    (when *is-a-mac*
      (set-frame-font "Operator Mono 14"))
    (when *is-a-linux*
      (set-frame-font "Operator Mono 12"))
    (if (version< "27.0" emacs-version)
	(set-fontset-font
	 "fontset-default" 'unicode "Apple Color Emoji" nil 'prepend)
      (set-fontset-font
       t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend))
    ;;‰∏ªÈ¢ò
    (when (graphic-p)
      (straight-use-package 'doom-themes)
      (use-package doom-themes
	:config
	;; Global settings (defaults)
	(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	      doom-themes-enable-italic t) ; if nil, italics is universally disabled
	(load-theme 'doom-spacegrey t)

	;; Enable flashing mode-line on errors
	(doom-themes-visual-bell-config)

	;; Enable custom neotree theme (all-the-icons must be installed!)
	(doom-themes-neotree-config)
	;; or for treemacs users
	(setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
	(doom-themes-treemacs-config)

	;; Corrects (and improves) org-mode's native fontification.
	(doom-themes-org-config)))
    ;;ÈÄèÊòé
    (when (graphic-p)
      (add-to-list 'default-frame-alist'(ns-transparent-titlebar . t))
      (add-to-list 'default-frame-alist'(ns-appearance . dark))
      (add-to-list 'default-frame-alist'(alpha . (80 . 75))))
    ;;üåàÊã¨Âè∑
    (straight-use-package 'rainbow-delimiters)
    (use-package 
      rainbow-delimiters 
      :config
      ;; ËÆæÁΩÆÊØè‰∏ÄÁ∫ßÊã¨Âè∑ÁöÑÈ¢úËâ≤
      (set-face-foreground 'rainbow-delimiters-depth-1-face "orange red") 
      (set-face-foreground 'rainbow-delimiters-depth-2-face "gold") 
      (set-face-foreground 'rainbow-delimiters-depth-3-face "yellow") 
      (set-face-foreground 'rainbow-delimiters-depth-4-face "spring green") 
      (set-face-foreground 'rainbow-delimiters-depth-5-face "cyan") 
      (set-face-foreground 'rainbow-delimiters-depth-6-face "magenta") 
      (set-face-foreground 'rainbow-delimiters-depth-7-face "goldenrod") 
      (set-face-foreground 'rainbow-delimiters-depth-8-face "IndianRed1") 
      (set-face-foreground 'rainbow-delimiters-depth-9-face "ivory1") 
      (set-face-bold 'rainbow-delimiters-depth-1-face "t") 
      (set-face-bold 'rainbow-delimiters-depth-2-face "t") 
      (set-face-bold 'rainbow-delimiters-depth-3-face "t") 
      (set-face-bold 'rainbow-delimiters-depth-4-face "t") 
      (set-face-bold 'rainbow-delimiters-depth-5-face "t") 
      (set-face-bold 'rainbow-delimiters-depth-6-face "t") 
      (set-face-bold 'rainbow-delimiters-depth-7-face "t") 
      (set-face-bold 'rainbow-delimiters-depth-8-face "t") 
      (set-face-bold 'rainbow-delimiters-depth-9-face "t") 
      (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
    (straight-use-package 'doom-modeline)
    (use-package doom-modeline
      :init (doom-modeline-mode 1))
    (straight-use-package 'nyan-mode)
    (use-package nyan-mode
      :init (setq nyan-animate-nyancat t
		  nyan-bar-length 16
		  nyan-wavy-trail t)
      :hook ((after-init . nyan-mode)))
  #+end_src
* Editor
  #+begin_src emacs-lisp
    ;; Ëá™Âä®Âä†ËΩΩÂ§ñÈÉ®‰øÆÊîπËøáÁöÑÊñá‰ª∂
    (global-auto-revert-mode 1)
    ;; ÂÖ≥Èó≠Ëá™Â∑±Áîü‰∫ßÁöÑ‰øùÂ≠òÊñá‰ª∂
    (setq auto-save-default nil)
    ;; ÂÖ≥Èó≠Ëá™Â∑±Áîü‰∫ßÁöÑÂ§á‰ªΩÊñá‰ª∂
    (setq make-backup-files nil)
    ;; ÈÄâ‰∏≠Êüê‰∏™Âå∫ÂüüÁªßÁª≠ÁºñËæëÂèØ‰ª•ÊõøÊç¢ÊéâËØ•Âå∫Âüü
    (delete-selection-mode 1)
    ;; ËÆæÁΩÆh Êñá‰ª∂ÈªòËÆ§‰∏∫c++Êñá‰ª∂
    (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
    ;; orgmode
    (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
    ;; without lock files
    (setq create-lockfiles nil)
  #+end_src
** highlight-indent-guides
   #+begin_src emacs-lisp
     (straight-use-package 'highlight-indent-guides)
     (use-package highlight-indent-guides
       :hook ((prog-mode web-mode) . highlight-indent-guides-mode)
       :config
       (setq highlight-indent-guides-method (if window-system 'character 'nil))
       (setq highlight-indent-guides-responsive 'stack))
   #+end_src
* Packages
** xah_fly_keys
   #+BEGIN_SRC emacs-lisp
     (straight-use-package 'xah-fly-keys)
     (use-package xah-fly-keys
       :config
       (xah-fly-keys-set-layout 'qwerty)
       (xah-fly-keys 1))
     (define-key key-translation-map (kbd "ESC") (kbd "C-g"))
     (define-key xah-fly-w-keymap (kbd "o") 'xah-html-open-in-chrome-browser)
     (define-key xah-fly-w-keymap (kbd "1") 'delete-other-windows)
     (define-key xah-fly-w-keymap (kbd "t") 'treemacs)
     (define-key xah-fly-c-keymap (kbd "e") 'counsel-find-file)
   #+END_SRC 
** which_key
   #+begin_src emacs-lisp
     (straight-use-package 'which-key)
     (which-key-mode)
   #+end_src
  
** IVY
   #+begin_src emacs-lisp
     (straight-use-package 'ivy)
     (straight-use-package 'counsel)
     (straight-use-package 'swiper)
     (straight-use-package 'all-the-icons-ivy-rich)
     (use-package ivy
       :init
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq enable-recursive-minibuffers t))
     (use-package all-the-icons-ivy-rich
       :init (all-the-icons-ivy-rich-mode 1))
     (use-package ivy-rich
       :init (ivy-rich-mode 1))
   #+end_src
** lsp-mode
   #+begin_src emacs-lisp
     (straight-use-package 'lsp-mode)
     (straight-use-package 'lsp-ui)
     (straight-use-package 'lsp-treemacs)
     ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
     (setq lsp-keymap-prefix "s-l")
     (use-package lsp-mode
       :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
	      (html-mode . lsp)
	      (css-mode . lsp)
	      (js-mode . lsp)
	      (typescript-mode . lsp)
	      ;; if you want which-key integration
	      (lsp-mode . lsp-enable-which-key-integration))
       :commands lsp)
     (use-package lsp-ui :commands lsp-ui-mode)
     (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
   #+end_src
** company
   #+begin_src emacs-lisp
     (straight-use-package 'company)
     (use-package company 
       :defer 2 
       :hook (after-init . global-company-mode) 
       :init (setq company-tooltip-align-annotations t company-idle-delay 0 company-echo-delay 0
		   company-minimum-prefix-length 1 company-require-match nil company-dabbrev-ignore-case
		   nil company-dabbrev-downcase nil company-show-numbers t) 
       :config 
       :bind (:map company-active-map
		   ("M-n" . nil) 
		   ("M-p" . nil) 
		   ("C-n" . #'company-select-next) 
		   ("C-p" . #'company-select-previous)))
   #+end_src
** magit
   #+BEGIN_SRC emacs-lisp
   (straight-use-package 'magit)
   #+END_SRC
** yasnippet
#+begin_src emacs-lisp
  (straight-use-package 'yasnippet)
  (straight-use-package 'yasnippet-snippets)
  (use-package yasnippet
    :commands
    (yas-reload-all)
    :init
    (add-hook 'prog-mode-hook #'yas-minor-mode))
#+end_src
** emacs-rime
   #+begin_src emacs-lisp
     (use-package rime
       :straight (rime :type git
		       :host github
		       :repo "DogLooksGood/emacs-rime"
		       :files ("*.el" "Makefile" "lib.c"))
       :custom
       (rime-show-candidate 'posframe)
       (default-input-method "rime"))
   #+end_src
* Func
** Open in Google Chrome
   #+begin_src emacs-lisp
     (defun xah-html-open-in-chrome-browser ()
       "Open the current file or `dired' marked files in Google Chrome browser.
     Work in Windows, macOS, linux.
     URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'
     Version 2019-11-10"
       (interactive)
       (let* (
	      ($file-list
	       (if (string-equal major-mode "dired-mode")
		   (dired-get-marked-files)
		 (list (buffer-file-name))))
	      ($do-it-p (if (<= (length $file-list) 5)
			    t
			  (y-or-n-p "Open more than 5 files? "))))
	 (when $do-it-p
	   (cond
	    ((string-equal system-type "darwin")
	     (mapc
	      (lambda ($fpath)
		(shell-command
		 (format "open -a /Applications/Google\\ Chrome.app \"%s\"" $fpath)))
	      $file-list))
	    ((string-equal system-type "windows-nt")
	     ;; "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" 2019-11-09
	     (let ((process-connection-type nil))
	       (mapc
		(lambda ($fpath)
		  (start-process "" nil "powershell" "start-process" "chrome" $fpath ))
		$file-list)))
	    ((string-equal system-type "gnu/linux")
	     (mapc
	      (lambda ($fpath)
		(shell-command (format "chromium \"%s\"" $fpath)))
	      $file-list))))))
   #+end_
