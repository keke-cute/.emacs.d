* Change-char-width
  Code from [[https://github.com/nasyxx/emacs.d/blob/master/literate-config/core/core-text.org]]
  #+begin_src emacs-lisp
    (defun nasy/change-char-width (char width)
      "Change CHAR width to WIDTH."
      (let ((table (make-char-table nil)))
	(set-char-table-parent table char-width-table)
	(set-char-table-range table char width)
	(setq char-width-table table)))
  #+end_src
* Font
  Code from [[https://github.com/nasyxx/emacs.d/tree/master/literate-config/ui]]
  #+begin_src emacs-lisp
    (defvar nasy/font-change-hook nil
      "Hooks to run after font changed.")

    (defun nasy/check-font (font)
      "Check if FONT avaliable."
      (if (find-font (font-spec :family font
				:weight *font-main-weight*
				:size   *font-main-size*))
	  t
	(message (format "`%s' font not find" font))))

    (defun nasy/set-default-font (charset &optional size frame)
      "Set CHARSET fontset to default *font-main* with SIZE on FRAME."
      (when (and (display-graphic-p)
		(nasy/check-font *font-main-family*))
	(let ((size (or size *font-main-size*)))
	  (set-fontset-font t
			    charset
			    (font-spec :family *font-main-family*
				       :weight *font-main-weight*
				       :size   size)
			    frame
			    'prepend))))

    (defun nasy/set-hanamin (charset &optional size frame)
      "Set CHARSET fontset to HanaMin with SIZE on FRAME.
    https://github.com/cjkvi/HanaMinAFDKO/releases
    Font for char like 𨉚."
      (when (display-graphic-p)
	(let ((size (or size *font-cjk-size*)))
	  (when (nasy/check-font "HanaMinB")
	    (set-fontset-font (frame-parameter nil 'font)
			      charset
			      (font-spec :family "HanaMinB"
					 :weight 'normal
					 :size   size)
			      frame
			      'prepend))
	  (when (nasy/check-font "HanaMinA")
	    (set-fontset-font (frame-parameter nil 'font)
			      charset
			      (font-spec :family "HanaMinA"
					 :weight 'normal
					 :size   size)
			      frame
			      'prepend))
	  (setf (alist-get ".*HanaMinA.*" face-font-rescale-alist *font-cjk-scale* nil 'string=)
		,*font-cjk-scale*)
	  (setf (alist-get ".*HanaMinB.*" face-font-rescale-alist *font-cjk-scale* nil 'string=)
		,*font-cjk-scale*)
	  (cl-loop for sfx in (reverse '("A" "B" "C" "Ex A1" "Ex A2" "Ex B" "Ex C" "I"))
		   for hfont = (concat "Hanazono Mincho " sfx)
		   do
		   (progn
		     (when (nasy/check-font hfont)
		       (set-fontset-font (frame-parameter nil 'font)
					 charset
					 (font-spec :family hfont
						    :weight 'normal
						    :size   size)
					 frame
					 'prepend))

		    (setf (alist-get (format ".*%s.*" hfont)
				     face-font-rescale-alist
				     ,*font-cjk-scale*
				     nil
				     'string=)
			  ,*font-cjk-scale*))))))

    (defun nasy/set-symbol (charset &optional size weight frame)
	"Set CHARSET fontset to HanaMin with SIZE with WEIGHT on FRAME.

      Font for char like ∷."
	(when (display-graphic-p)
	  (let ((size (or size *font-symbol-size*)))
	    (when (nasy/check-font *font-symbol-family*)
	      (set-fontset-font (frame-parameter nil 'font)
				charset
				(font-spec :family *font-symbol-family*
					   :weight weight
					   :size   size)
				frame
				'prepend)))))

    (defun nasy/set--font (frame)
      "Nasy set font for `FRAME'."
      (when (display-graphic-p)
	;; default
	(when (nasy/check-font *font-main-family*)
	  (set-face-attribute
	      'default nil
	      :font (font-spec :family *font-main-family*
			       :weight *font-main-weight*
			       :size   *font-main-size*)))
	;; 中文
	(dolist (charset '(kana han cjk-misc bopomofo))
	  (progn
	    (nasy/set-hanamin charset)
	    (cl-loop for fn in (reverse '("" "-2" "-3" "-4" "-5"))
		     for fpf = (format "*font-cjk%s" fn)
		     for ff  = (eval (intern (concat fpf "-family*")))
		     for fw  = (eval (intern (concat fpf "-weight*")))
		     for fs  = (eval (intern (concat fpf "-size*")))
		     for fss = (eval (intern (concat fpf "-scale*")))
		     do
		     (progn
		       (when (nasy/check-font ff)
			 (set-fontset-font (frame-parameter nil 'font)
					   charset
					   (font-spec :family ff
						      :weight fw
						      :size   fs)
					   frame
					   'prepend))
		       (let ((ffn (concat ".*" ff ".*")))
			 (setf (alist-get ffn face-font-rescale-alist fss nil 'string=) fss))))))

	(when (and *is-a-mac*
		  (nasy/check-font "Apple Color Emoji"))
	  ;; For NS/Cocoa
	  (set-fontset-font (frame-parameter nil 'font)
			    'symbol
			    (font-spec :family "Apple Color Emoji")
			    frame
			    'prepend))

	(when (nasy/check-font *font-symbol-family*)
	  (set-fontset-font (frame-parameter nil 'font)
			    'symbol
			    (font-spec :family *font-symbol-family*
				       :weight *font-symbol-weight*
				       :size   *font-symbol-size*)
			    frame
			    'append))

	(when (nasy/check-font *font-mode-line-family*)
	  (set-face-attribute 'mode-line nil
			      :font (font-spec :family *font-mode-line-family*
					       :weight *font-mode-line-weight*
					       :size   *font-mode-line-size*))

	  (set-face-attribute 'mode-line-inactive nil
			      :font (font-spec :family *font-mode-line-family*
					       :weight *font-mode-line-weight*
					       :size   *font-mode-line-size*)))
	(when (nasy/check-font *font-tab-line-family*)
	  (set-face-attribute 'tab-line nil
			      :font (font-spec :family *font-tab-line-family*
					       :weight *font-tab-line-weight*
					       :size   *font-tab-line-size*)))
	(when (nasy/check-font *font-header-line-family*)
	  (set-face-attribute 'header-line nil
			      :font (font-spec :family *font-header-line-family*
					       :weight *font-header-line-weight*
					       :size   *font-header-line-size*)))

	(after-x 'doom-modeline
	  (doom-modeline--set-char-widths doom-modeline-rhs-icons-alist)))
      (run-hooks 'nasy/font-change-hook))

    (defun nasy/set-font (&rest _)
      "Nasy set font."
      (interactive)
      (nasy/set--font nil))


    (add-hook #'after-init-hook #'nasy/set-font)
    (add-hook #'after-make-frame-functions   #'nasy/set-font)
    (add-hook #'server-after-make-frame-hook #'nasy/set-font)
  #+end_src
