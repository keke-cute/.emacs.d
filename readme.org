#+title: My Emacs Configure
#+author: keke
#+email: liushike1997@gmail.com
#+date: <2020-12-26 Sat>
#+export_file_name: ~/Repos/keke-cute.github.io/blog/myemacsconf.html
#+options: creator:t author:t
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="me.css" />
* Straight.el
  #+begin_src emacs-lisp
    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))
  #+end_src
  
  #+begin_src emacs-lisp
    (straight-use-package 'leaf)
    (straight-use-package 'magit)
  #+end_src
* Detect System
  #+begin_src emacs-lisp
    (defconst *is-a-mac* (eq system-type 'darwin))
    (defconst *is-a-linux* (eq system-type 'gnu/linux))
    (defun graphic-p ()
      (display-graphic-p))

    (if (string= (system-name) "playground") ;; if
	(load-file "~/.emacs.d/etc/init-guix.el") ;; then
      (load-file "~/.emacs.d/etc/init-linux.el")) ;; else
  #+end_src
* UI
** Main
   #+begin_src emacs-lisp
     (menu-bar-mode -1)
     (global-linum-mode 1)
     (global-hl-line-mode t)
     (setq inhibit-splash-screen t)

     (when (graphic-p)
       ;;  transparent frame
       (add-to-list 'default-frame-alist'(ns-transparent-titlebar . t))
       (add-to-list 'default-frame-alist'(ns-appearance . dark))
       (add-to-list 'default-frame-alist'(alpha . (90 . 85)))
       (setq org-startup-with-inline-images t)
       (scroll-bar-mode -1)
       (tool-bar-mode -1)
       ;; default frame size
       ;;      (setq initial-frame-alist
       ;;	    '(
       ;;	      (width . 106)
       ;;	      (height . 56)
       ;;	      )))
       )

     ;; 指定模式禁用行号
     (defun my-inhibit-global-linum-mode ()
       "Counter-act `global-linum-mode'."
       (add-hook 'after-change-major-mode-hook
		 (lambda () (linum-mode 0))
		 :append :local))

     (leaf my-inhibit-global-linum-mode
       :hook
       (eshell-mode-hook . my-inhibit-global-linum-mode)
       (term-mode-hook . my-inhibit-global-linum-mode)
       (vterm-mode-hook . my-inhibit-global-linum-mode)
       (telega-chat-mode-hook . my-inhibit-global-linum-mode)
       (telega-root-mode-hook . my-inhibit-global-linum-mode))

     (when *is-a-mac*
       (tool-bar-mode t))
   #+end_src
** Font
   #+begin_src emacs-lisp
     (when (graphic-p)
       (let ((emacs-font-size 13)
	     (emacs-font-name "OperatorMono Nerd Font"))
	 (set-frame-font (format "%s-%s" (eval emacs-font-name) (eval emacs-font-size)) nil t)
	 (set-fontset-font (frame-parameter nil 'font) 'unicode (eval emacs-font-name))))
   #+end_src
** Theme
   #+begin_src emacs-lisp
     (when (graphic-p)
       (load-file "~/.emacs.d/site-lisp/nasy-theme.el")
       (load-theme 'nasy t))
   #+end_src
** Plugins
*** 彩虹括号
    #+begin_src emacs-lisp
      (straight-use-package 'rainbow-delimiters)

      (leaf rainbow-delimiters
	:hook
	(prog-mode-hook . rainbow-delimiters-mode)
	:config
	;; 设置每一级括号的颜色
	(set-face-foreground 'rainbow-delimiters-depth-1-face "orange red") 
	(set-face-foreground 'rainbow-delimiters-depth-2-face "gold") 
	(set-face-foreground 'rainbow-delimiters-depth-3-face "yellow") 
	(set-face-foreground 'rainbow-delimiters-depth-4-face "spring green") 
	(set-face-foreground 'rainbow-delimiters-depth-5-face "cyan") 
	(set-face-foreground 'rainbow-delimiters-depth-6-face "magenta") 
	(set-face-foreground 'rainbow-delimiters-depth-7-face "goldenrod") 
	(set-face-foreground 'rainbow-delimiters-depth-8-face "IndianRed1") 
	(set-face-foreground 'rainbow-delimiters-depth-9-face "ivory1") 
	(set-face-bold 'rainbow-delimiters-depth-1-face "t") 
	(set-face-bold 'rainbow-delimiters-depth-2-face "t") 
	(set-face-bold 'rainbow-delimiters-depth-3-face "t") 
	(set-face-bold 'rainbow-delimiters-depth-4-face "t") 
	(set-face-bold 'rainbow-delimiters-depth-5-face "t") 
	(set-face-bold 'rainbow-delimiters-depth-6-face "t") 
	(set-face-bold 'rainbow-delimiters-depth-7-face "t") 
	(set-face-bold 'rainbow-delimiters-depth-8-face "t") 
	(set-face-bold 'rainbow-delimiters-depth-9-face "t"))
    #+end_src
*** 对齐线
    #+begin_src emacs-lisp
      (when (graphic-p)
	(straight-use-package 'highlight-indent-guides)

	(leaf highlight-indent-guides
	  :hook
	  (prog-mode-hook .  highlight-indent-guides-mode)
	  :config
	  (setq highlight-indent-guides-method (if window-system 'character 'nil))
	  (setq highlight-indent-guides-responsive 'stack)))
    #+end_src
* Editor
  #+begin_src emacs-lisp
    ;; 自动加载外部修改过的文件
    (global-auto-revert-mode 1)
    ;; 关闭自己生产的保存文件
    (setq auto-save-default nil)
    ;; 关闭自己生产的备份文件
    (setq make-backup-files nil)
    ;; 选中某个区域继续编辑可以替换掉该区域
    (delete-selection-mode 1)
    ;; 设置h 文件默认为c++文件
    (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
    ;; orgmode
    (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
    ;; without lock files
    (setq create-lockfiles nil)
    ;; y-or-n
    (fset 'yes-or-no-p 'y-or-n-p)
  #+end_src
* Packages
** Selectrum
   #+begin_src emacs-lisp
     (straight-use-package 'selectrum)

     (leaf selectrum
       :config
       (selectrum-mode +1))
   #+end_src
** Company
   #+begin_src emacs-lisp
     (straight-use-package 'company)

     (leaf company
       :hook
       (after-init-hook . global-company-mode)
       :init
       (setq company-tooltip-align-annotations t company-idle-delay 0.1 company-echo-delay 0
	     company-minimum-prefix-length 2 company-require-match nil company-dabbrev-ignore-case
	     nil company-dabbrev-downcase nil company-show-numbers t)
       :bind
       ((:company-active-map
	 ("M-n" . nil) 
	 ("M-p" . nil) 
	 ("C-n" . company-select-next) 
	 ("C-p" . company-select-previous))))
   #+end_src
** Lsp-mode
   #+begin_src emacs-lisp
     (straight-use-package 'lsp-mode)

     (leaf lsp-mode
       :commands lsp)
   #+end_src
** Flycheck
   #+begin_src emacs-lisp
     (straight-use-package 'flycheck)

     (leaf flycheck
       :init
       (global-flycheck-mode))
   #+end_src
** Org-babel
   #+begin_src emacs-lisp
     (custom-set-variables
      '(org-babel-load-languages (quote ((emacs-lisp . t) (haskell . t))))
      '(org-confirm-babel-evaluate nil))
   #+end_src
* Languages
** Haskell
   #+begin_src emacs-lisp
     (straight-use-package 'haskell-mode)

     (leaf haskell-mode
       :require t)

     (leaf inf-haskell
       :require t)
   #+end_src
** Golang
   #+begin_src emacs-lisp
     (straight-use-package 'go-mode)

     (leaf go-mode
       :hook
       (go-mode-hook . lsp))
   #+end_src
