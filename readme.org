#+title: My Emacs Configure
#+author: keke
#+email: liushike1997@gmail.com
#+date: <2020-09-13 Sun>
#+export_file_name: ~/Src/keke-cute.github.io/blog/myemacsconf.html
#+options: creator:t author:t
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/m-dark.css" />
#+HTML_HEAD_EXTRA: <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Code+Pro:400,400i,600%7CSource+Sans+Pro:400,400i,600&amp;subset=latin-ext" />
#+HTML_HEAD_EXTRA: <meta name="viewport" content="width=device-width, initial-scale=1.0" />
#+OPTIONS: html-style:nil
[[https://raw.githubusercontent.com/keke-cute/.emacs.d/master/2020-10-11_17-31.png]]
- this is my curreent emacs config, old archive see other branch
- git clone me, and run:
#+begin_src shell
  git submodule update --init --recursive
#+end_src
* Straight.el
  #+begin_src emacs-lisp
    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))
  #+end_src
  #+begin_src emacs-lisp
    (straight-use-package 'use-package)
    (straight-use-package 'magit)
    (straight-use-package 'vterm)
    (straight-use-package 'terraform-mode)
    (straight-use-package 'posframe)
  #+end_src
* Is A?
  #+begin_src emacs-lisp
    (defconst *is-a-mac* (eq system-type 'darwin))
    (defconst *is-a-linux* (eq system-type 'gnu/linux))
    ;; if the default directory not '~/',fix it.
    (when *is-a-mac*
      (setq command-line-default-directory "~/"))
  #+end_src
* Is graphic?
  #+begin_src emacs-lisp
    (defun graphic-p ()
      (display-graphic-p))
  #+end_src
* UI
  #+begin_src emacs-lisp
    (when (graphic-p)
      ;;  transparent frame
      (add-to-list 'default-frame-alist'(ns-transparent-titlebar . t))
      (add-to-list 'default-frame-alist'(ns-appearance . dark))
      (add-to-list 'default-frame-alist'(alpha . (80 . 75)))
      (menu-bar-mode -1)
      (scroll-bar-mode -1)
      (global-linum-mode 1)
      (tool-bar-mode -1)
      (global-hl-line-mode t)
      (setq inhibit-splash-screen t)
      (setq org-startup-with-inline-images t)
      ;; default frame size
      ;;      (setq initial-frame-alist
      ;;	    '(
      ;;	      (width . 106)
      ;;	      (height . 56)
      ;;	      )))
      )
    (display-time-mode 1)
    ;; teansparent title(mac only)
    (when (memq window-system '(mac ns))
      (menu-bar-mode 1)
      (add-to-list 'default-frame-alist '(ns-appearance . dark)) ; nil for dark text
      (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t)))

    ;; 指定模式禁用行号
    (add-hook 'vterm-mode-hook 'my-inhibit-global-linum-mode)
    (defun my-inhibit-global-linum-mode ()
      "Counter-act `global-linum-mode'."
      (add-hook 'after-change-major-mode-hook
		(lambda () (linum-mode 0))
		:append :local))
    ;; 字体设置
    (when (graphic-p)
      (let ((emacs-font-size 13)
	    (emacs-font-name "Rec Mono Linear"))
	(set-frame-font (format "%s-%s" (eval emacs-font-name) (eval emacs-font-size)))
	(set-fontset-font (frame-parameter nil 'font) 'unicode (eval emacs-font-name)))
      (with-eval-after-load 'org
	(defun org-buffer-face-mode-variable ()
	  (interactive)
	  (make-face 'width-font-face)
	  (set-face-attribute 'width-font-face nil :font "Sarasa Mono SC 15")
	  (setq buffer-face-mode-face 'width-font-face)
	  (buffer-face-mode))
	(add-hook 'org-mode-hook 'org-buffer-face-mode-variable)))

    (if (version< "27.0" emacs-version)
	(set-fontset-font
	 "fontset-default" 'unicode "Apple Color Emoji" nil 'prepend)
      (set-fontset-font
       t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend))
    ;; theme
    (use-package lazycat-theme
      :load-path "~/.emacs.d/site-lisp/lazycat-theme")
    (straight-use-package 'modus-operandi-theme)
    (straight-use-package 'modus-vivendi-theme)
    (straight-use-package 'circadian)
    (use-package
      circadian
      :config
      ;; 经纬度，可以在https://www.latlong.net/获取，默认是广州的
      (setq calendar-latitude 35.388779
	    calendar-longitude 116.084290)
      ;; sunrise 白天用的主题 sunset 晚上用的主题
      (setq circadian-themes '((:sunrise . lazycat-light)
			       (:sunset . lazycat-dark)))
      (circadian-setup))
    ;; mode-line
    (use-package awesome-tray
      :load-path "~/.emacs.d/site-lisp/awesome-tray"
      :init
      (require 'awesome-tray)
      (awesome-tray-mode 1))
  #+end_src
* Editor
  #+begin_src emacs-lisp
    ;; 自动加载外部修改过的文件
    (global-auto-revert-mode 1)
    ;; 关闭自己生产的保存文件
    (setq auto-save-default nil)
    ;; 关闭自己生产的备份文件
    (setq make-backup-files nil)
    ;; 选中某个区域继续编辑可以替换掉该区域
    (delete-selection-mode 1)
    ;; 设置h 文件默认为c++文件
    (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
    ;; orgmode
    (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
    ;; without lock files
    (setq create-lockfiles nil)
    ;; y-or-n
    (fset 'yes-or-no-p 'y-or-n-p)
  #+end_src
* Package
** Ivy
   #+begin_src emacs-lisp
     (straight-use-package 'ivy)
     (straight-use-package 'swiper)
     (straight-use-package 'counsel)
     (straight-use-package 'ivy-posframe)
     (ivy-mode 1)
     (setq ivy-use-virtual-buffers t)
     (setq enable-recursive-minibuffers t)
     ;; enable this if you want `swiper' to use it
     ;; (setq search-default-mode #'char-fold-to-regexp)
     (global-set-key "\C-s" 'swiper)
     (global-set-key (kbd "C-c C-r") 'ivy-resume)
     (global-set-key (kbd "<f6>") 'ivy-resume)
     (global-set-key (kbd "M-x") 'counsel-M-x)
     (global-set-key (kbd "C-x C-f") 'counsel-find-file)
     (global-set-key (kbd "<f1> f") 'counsel-describe-function)
     (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
     (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
     (global-set-key (kbd "<f1> l") 'counsel-find-library)
     (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
     (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
     (global-set-key (kbd "C-c g") 'counsel-git)
     (global-set-key (kbd "C-c j") 'counsel-git-grep)
     (global-set-key (kbd "C-c k") 'counsel-ag)
     (global-set-key (kbd "C-x l") 'counsel-locate)
     (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
     (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
     (require 'ivy-posframe)
     ;; display at `ivy-posframe-style'
     (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display)))
     ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
     ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-center)))
     ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-bottom-left)))
     ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-bottom-left)))
     ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center)))
     (ivy-posframe-mode 1)
   #+end_src
** Roam
   #+begin_src emacs-lisp
     ;;(straight-use-package 'org-roam)
     ;;(straight-use-package 'org-roam-server)
     ;;(use-package org-roam
     ;;  :hook
     ;;  (after-init . org-roam-mode)
     ;;  :custom
     ;;  (org-roam-directory "~/src/org/roam")
     ;;  :bind (:map org-roam-mode-map
     ;;	      (("C-c n l" . org-roam)
     ;;	       ("C-c n f" . org-roam-find-file)
     ;;	       ("C-c n g" . org-roam-graph-show))
     ;;	      :map org-mode-map
     ;;	      (("C-c n i" . org-roam-insert))
     ;;	      (("C-c n I" . org-roam-insert-immediate))))
     ;;(use-package org-roam-server
     ;;  :config
     ;;  (setq org-roam-server-host "127.0.0.1"
     ;;      org-roam-server-port 9090
     ;;      org-roam-server-export-inline-images t
     ;;      org-roam-server-authenticate nil
     ;;      org-roam-server-label-truncate t
     ;;      org-roam-server-label-truncate-length 60
     ;;      org-roam-server-label-wrap-length 20)
     ;;  (org-roam-server-mode)
     ;;  (require 'org-roam-protocol))
     ;;
   #+end_src
** Which-key
   #+begin_src emacs-lisp
     (straight-use-package 'which-key)
     (use-package which-key
       :config
       (which-key-mode))
   #+end_src
** emacs-rime
   #+begin_src emacs-lisp
     (when (graphic-p)
       (when *is-a-linux*
	 (use-package rime
	   :straight (rime :type git
			   :host github
			   :repo "DogLooksGood/emacs-rime"
			   :files ("*.el" "Makefile" "lib.c"))
	   :custom
	   (default-input-method "rime")
	   (rime-show-candidate 'posframe))))
   #+end_src
** helm
   #+begin_src emacs-lisp
     ;;(straight-use-package 'helm)
     ;;(global-set-key (kbd "M-x") #'helm-M-x)
     ;;(global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
     ;;(global-set-key (kbd "C-x C-f") #'helm-find-files)
     ;;(helm-mode 1)
   #+end_src
** ace-window
   #+begin_src emacs-lisp
     (straight-use-package 'ace-window)
     (global-set-key (kbd "M-o") 'ace-window)
     (setq aw-dispatch-always t)
   #+end_src
** exec-path-from-shell
   #+begin_src emacs-lisp
     ;; if macos can't use path, fix it
     (straight-use-package 'exec-path-from-shell)
     (when (memq window-system '(mac ns x))
       (exec-path-from-shell-initialize))
   #+end_src
