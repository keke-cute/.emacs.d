#+title: ÊàëÁöÑ Emacs ÈÖçÁΩÆÊñá‰ª∂
#+author: keke
#+email: librek@protonmail.com
#+date: <2021-06-23 Wed>
#+export_file_name: ~/Repos/keke-cute.github.io/emacs.html
#+options: creator:t author:t
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="static/me.css" /> <a href="index.html">üè† Back To Home</a>
#+PROPERTY: header-args:emacs-lisp :tangle (concat temporary-file-directory "init.el") :lexical t
* File Header                                            :noexport:

#+begin_src emacs-lisp
  ;;; init.el -*- lexical-binding: t; -*-
#+end_src
* È¢ÑËßà
[[./ScreenShot-1.png]]

[[./ScreenShot-2.png]]
* ‰ΩøÁî®
#+begin_src shell
  mv ~/.emacs.d ~/.emacs.d.backup
  git clone https://github.com/keke-cute/.emacs.d ~/.emacs.d
  cd ~/.emacs.d
  git submodule update --init
  make
#+end_src
* Straight.el & Leaf
  #+begin_src emacs-lisp
    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))
  #+end_src
  #+begin_src emacs-lisp
    (straight-use-package 'leaf)
  #+end_src
* ÂÆèÂíåÂáΩÊï∞
[[https://github.com/nasyxx/emacs.d/blob/master/%E8%94%93%E8%89%B8/%E9%A2%A8%E9%9B%A8/%E7%AF%87.org][ËîìËâ∏/È¢®Èõ®/ÁØá.org]]
  #+begin_src emacs-lisp
    (cl-eval-when (compile eval load)
      (if (fboundp 'with-eval-after-load)
          (defalias 'after-x 'with-eval-after-load)
        (defmacro after-x (feature &rest body)
          "Eval BODY afetr FEATURE have loaded."
          (declare (indent defun))
          `(eval-after-load ,feature
             '(progn ,@body)))))
  #+end_src
  #+begin_src emacs-lisp
    (defun nasy/change-char-width (char width)
      "Change CHAR width to WIDTH."
      (let ((table (make-char-table nil)))
        (set-char-table-parent table char-width-table)
        (set-char-table-range table char width)
        (setq char-width-table table)))
  #+end_src
  Myself
  #+begin_src emacs-lisp
    (defun keke/getgnukstatus ()
      "output opengpg card message"
      (shell-command "gpg --card-status"))
  #+end_src
* Ê£ÄÊµãÁ≥ªÁªü
  #+begin_src emacs-lisp
    (defconst *is-a-mac* (eq system-type 'darwin))
    (defconst *is-a-linux* (eq system-type 'gnu/linux))

    (defun graphic-p ()
      (display-graphic-p))


    ;;(when (file-directory-p "/run/current-system/profile/share/emacs/site-lisp")
    ;;  (add-to-list 'load-path "/run/current-system/profile/share/emacs/site-lisp/")
    ;;  (message "Hello, Guix System User")
    ;;  (leaf exwm-systemtray
    ;;    :commands
    ;;    exwm-systemtray--init
    ;;    exwm-systemtray--enable
    ;;    :hook
    ;;    (exwm-init-hook . exwm-systemtray--init)
    ;;    (exwm-exit-hook . exwm-systemtray--exit)))

    ;;(if (string= (system-name) "playground") ;; if
    ;;    (load-file "~/.emacs.d/etc/init-guix.el") ;; then
    ;;  (load-file "~/.emacs.d/etc/init-linux.el")) ;; else
  #+end_src

* ÁïåÈù¢
** ‰∏ªË¶ÅÁöÑ‰∏Ä‰∫õËÆæÂÆö
   #+begin_src emacs-lisp
     ;;(setq inhibit-splash-screen t)
     (when (graphic-p)
       ;; default frame size
       ;;(setq initial-frame-alist
       ;;	'((width . 150)
       ;;	  (height . 56)))
       (setq org-startup-with-inline-images t)
       (global-hl-line-mode t)
       (scroll-bar-mode -1))
   #+end_src

** Â≠ó‰ΩìËÆæÂÆö
[[https://github.com/nasyxx/emacs.d/blob/master/%E8%94%93%E8%89%B8/%E9%A2%A8%E9%9B%A8/%E7%AF%87.org][ËîìËâ∏/È¢®Èõ®/ÁØá.org]]
#+begin_src emacs-lisp
  (defvar nasy/font-change-hook nil
    "Hooks to run after font changed.")
  
  (defvar nasy--cus-font nil)
  (defvar nasy--set-font nil)
  
  
  (cl-eval-when (compile eval load)
    (defun nasy/-font-doc (cname ftype)
      "Generate font custome variable doc with CNAME and FTYPE."
      (concat "The " cname " font " ftype ".
    After change it, run `M-x nasy/set-font' to see the effect."))
  
  
    (defun nasy/-cus-font ()
      "Defcustom some fonts."
      (setq nasy--cus-font t)
      (dolist (cname '("main" "symbol" "cjk" "mode-line" "tab-line" "header-line"))
        (cl-loop for ftype in '("family" "weight" "size" "scale")
                 for type = (cond ((string= "family" ftype) 'string)
                                  ((string= "weight" ftype) 'symbol)
                                  ((string= "size" ftype)   'float)
                                  ((string= "scale" ftype)  'float)
                                  (t (error "Wrong Font Type")))
                 for doc  = (nasy/-font-doc cname ftype)
                 for name = (intern (format "*font-%s-%s*" cname ftype))
                 do
                 (progn
                   (custom-declare-variable name nil doc :group 'nasy-font :type type)
                   (when (string= "cjk" cname)
                     (cl-loop for sfxn in '(2 3 4 5)
                              for cname_ = (format "%s-%d" cname sfxn)
                              for name_  = (intern (format "*font-%s-%s*" cname_ ftype))
                              for doc_   = (nasy/-font-doc cname_ ftype)
                              do
                              (progn
                                (custom-declare-variable name_ nil doc_
                                                         :group 'nasy-font
                                                         :type type)))))))))
  
  
  (cl-eval-when (compile)
    (nasy/-cus-font))
  
  
  (defun nasy/check-font (font)
    "Check if FONT avaliable."
    (if (find-font (font-spec :family font
                              :weight *font-main-weight*
                              :size   *font-main-size*))
        t
      (message (format "`%s' font not find" font))))
  
  (defun nasy/set-default-font (charset &optional size frame)
    "Set CHARSET fontset to default *font-main* with SIZE on FRAME."
    (when (and (display-graphic-p)
               (nasy/check-font *font-main-family*))
      (let ((size (or size *font-main-size*)))
        (set-fontset-font t
                          charset
                          (font-spec :family *font-main-family*
                                     :weight *font-main-weight*
                                     :size   size)
                          frame
                          'prepend))))
  
  (defun nasy/set-hanamin (charset &optional size frame)
    "Set CHARSET fontset to HanaMin with SIZE on FRAME.
  https://github.com/cjkvi/HanaMinAFDKO/releases
  Font for char like ®âö."
    (when (display-graphic-p)
      (let ((size (or size *font-cjk-size*)))
        (when (nasy/check-font "HanaMinB")
          (set-fontset-font (frame-parameter nil 'font)
                            charset
                            (font-spec :family "HanaMinB"
                                       :weight 'normal
                                       :size   size)
                            frame
                            'prepend))
        (when (nasy/check-font "HanaMinA")
          (set-fontset-font (frame-parameter nil 'font)
                            charset
                            (font-spec :family "HanaMinA"
                                       :weight 'normal
                                       :size   size)
                            frame
                            'prepend))
        (setf (alist-get ".*HanaMinA.*" face-font-rescale-alist *font-cjk-scale* nil 'string=)
              ,*font-cjk-scale*)
        (setf (alist-get ".*HanaMinB.*" face-font-rescale-alist *font-cjk-scale* nil 'string=)
              ,*font-cjk-scale*)
        (cl-loop for sfx in (reverse '("A" "B" "C" "Ex A1" "Ex A2" "Ex B" "Ex C" "I"))
                 for hfont = (concat "Hanazono Mincho " sfx)
                 do
                 (progn
                   (when (nasy/check-font hfont)
                     (set-fontset-font (frame-parameter nil 'font)
                                       charset
                                       (font-spec :family hfont
                                                  :weight 'normal
                                                  :size   size)
                                       frame
                                       'prepend))
  
                   (setf (alist-get (format ".*%s.*" hfont)
                                    face-font-rescale-alist
                                    ,*font-cjk-scale*
                                    nil
                                    'string=)
                         ,*font-cjk-scale*))))))
  
  (defun nasy/set-symbol (charset &optional size weight frame)
    "Set CHARSET fontset to HanaMin with SIZE with WEIGHT on FRAME.
  
    Font for char like ‚à∑."
    (when (display-graphic-p)
      (let ((size (or size *font-symbol-size*)))
        (when (nasy/check-font *font-symbol-family*)
          (set-fontset-font (frame-parameter nil 'font)
                            charset
                            (font-spec :family *font-symbol-family*
                                       :weight weight
                                       :size   size)
                            frame
                            'prepend)))))
  
  (defun nasy/-set--font (frame)
    "Nasy set font for `FRAME'."
    (unless nasy--cus-font
      (nasy/-cus-font))
    (unless nasy--set-font
      (nasy/-set-font))
    (when (display-graphic-p)
      ;; default
      (when (nasy/check-font *font-main-family*)
        (set-face-attribute
         'default nil
         :font (font-spec :family *font-main-family*
                          :weight *font-main-weight*
                          :size   *font-main-size*)))
      ;; ‰∏≠Êñá
      (dolist (charset '(kana han cjk-misc bopomofo))
        (progn
          (nasy/set-hanamin charset)
          (cl-loop for fn in (reverse '("" "-2" "-3" "-4" "-5"))
                   for fpf = (format "*font-cjk%s" fn)
                   for ff  = (eval (intern (concat fpf "-family*")))
                   for fw  = (eval (intern (concat fpf "-weight*")))
                   for fs  = (eval (intern (concat fpf "-size*")))
                   for fss = (eval (intern (concat fpf "-scale*")))
                   do
                   (progn
                     (when (nasy/check-font ff)
                       (set-fontset-font (frame-parameter nil 'font)
                                         charset
                                         (font-spec :family ff
                                                    :weight fw
                                                    :size   fs)
                                         frame
                                         'prepend))
                     (let ((ffn (concat ".*" ff ".*")))
                       (setf (alist-get ffn face-font-rescale-alist fss nil 'string=) fss))))))
  
      (when (and *is-a-mac*
                 (nasy/check-font "Apple Color Emoji"))
        ;; For NS/Cocoa
        (set-fontset-font (frame-parameter nil 'font)
                          'symbol
                          (font-spec :family "Apple Color Emoji")
                          frame
                          'prepend))
  
      (when (nasy/check-font *font-symbol-family*)
        (set-fontset-font (frame-parameter nil 'font)
                          'symbol
                          (font-spec :family *font-symbol-family*
                                     :weight *font-symbol-weight*
                                     :size   *font-symbol-size*)
                          frame
                          'append))
  
      (when (nasy/check-font *font-mode-line-family*)
        (set-face-attribute 'mode-line nil
                            :font (font-spec :family *font-mode-line-family*
                                             :weight *font-mode-line-weight*
                                             :size   *font-mode-line-size*))
  
        (set-face-attribute 'mode-line-inactive nil
                            :font (font-spec :family *font-mode-line-family*
                                             :weight *font-mode-line-weight*
                                             :size   *font-mode-line-size*)))
      (when (nasy/check-font *font-tab-line-family*)
        (set-face-attribute 'tab-line nil
                            :font (font-spec :family *font-tab-line-family*
                                             :weight *font-tab-line-weight*
                                             :size   *font-tab-line-size*)))
      (when (nasy/check-font *font-header-line-family*)
        (set-face-attribute 'header-line nil
                            :font (font-spec :family *font-header-line-family*
                                             :weight *font-header-line-weight*
                                             :size   *font-header-line-size*))))
    (run-hooks 'nasy/font-change-hook))
  
  
  (defun nasy/-set-font (&rest _)
    "Font."
    (setq nasy--set-font t)
    (leaf nasy-font
      :doc "‰∏Ä‰∫õÈªòË®íÂÄ§„ÄÇ"
      :custom
      (*font-main-family*   . "OperatorMonoSSmLig Nerd Font")
      (*font-symbol-family* . "Symbola")
      (*font-cjk-family*    . "STFLGQKJF")
      (*font-cjk-2-family*  . "FZLiuGongQuanKaiShuJF")
      ;; I.Ngaan' font from `http://founder.acgvlyric.org/iu/doku.php/ÈÄ†Â≠ó:ÈñãÊ∫êÂ≠óÂûã_i.È°èÈ´î'.
      (*font-cjk-3-family*  . "I.Ngaan")
      (*font-cjk-4-family*  . "Kaiti SC")
      (*font-cjk-5-family*  . "Kaiti TC")
  
      ((*font-mode-line-family*
        ,*font-header-line-family*
        ,*font-tab-line-family*)
       . "Recursive Mono Casual Static")
  
      ((*font-main-size*
        ,*font-mode-line-size*)
       . 14)
      (*font-tab-line-size* . 13)
      (*font-symbol-size* . 17)
      ((*font-cjk-size*
        ,*font-cjk-2-size*
        ,*font-cjk-3-size*
        ,*font-cjk-4-size*
        ,*font-cjk-5-size*)
       . nil)
      (*font-header-line-size* . 12)
  
      ((*font-cjk-scale*
        ,*font-cjk-2-scale*
        ,*font-cjk-3-scale*
        ,*font-cjk-4-scale*
        ,*font-cjk-5-scale*)
       . 1.3)
  
      ((*font-main-weight*
        ,*font-symbol-weight*
        ,*font-cjk-weight*
        ,*font-cjk-2-weight*
        ,*font-cjk-3-weight*
        ;; *font-cjk-4-weight*
        ;; *font-cjk-5-weight*
        ,*font-mode-line-weight*
        ,*font-tab-line-weight*
        ,*font-header-line-weight*)
       . 'normal)
  
      ((*font-cjk-4-weight*
        ,*font-cjk-5-weight*) . 'bold))
  
    (require 'ËäÑËò≠ nil t))
  
  
  (defun nasy/set-font (&rest _)
    "Nasy set font."
    (interactive)
    (message "setting font...")
    (nasy/-set--font nil)
    (message "setting font...done"))
  
  (add-hook 'emacs-startup-hook #'nasy/-set-font 98)
  (add-hook 'emacs-startup-hook #'nasy/-cus-font 97)
  ;; (add-hook 'after-init-hook #'nasy/set-font)
  (add-hook 'emacs-startup-hook #'nasy/set-font 99)
  ;; (add-hook 'nasy-first-key-hook #'nasy/set-font)
  ;; (add-hook 'after-make-frame-functions #'nasy/set-font)
  
  (when noninteractive
    (nasy/set-font))
#+end_src
** ÊåáÂÆöÊ®°ÂºèÁ¶ÅÁî®Ë°åÂè∑
   #+begin_src emacs-lisp
     ;; (defun my-inhibit-global-linum-mode ()
     ;;   "Counter-act `global-linum-mode'."
     ;;   (add-hook 'after-change-major-mode-hook
     ;;             (lambda () (linum-mode 0))
     ;;             :append :local))
     ;; 
     ;; (leaf my-inhibit-global-linum-mode
     ;;   :hook
     ;;   (eshell-mode-hook . my-inhibit-global-linum-mode)
     ;;   (term-mode-hook . my-inhibit-global-linum-mode)
     ;;   (vterm-mode-hook . my-inhibit-global-linum-mode)
     ;;   (telega-chat-mode-hook . my-inhibit-global-linum-mode)
     ;;   (telega-root-mode-hook . my-inhibit-global-linum-mode))
     ;; 
   #+end_src

** ËÆæÂÆö macOS ‰∏äÁöÑÁ™óÂè£Ê†∑Âºè
   #+begin_src emacs-lisp
     (leaf mac-frame
       :when *is-a-mac*
       :config
       (defun stop-minimizing-window ()
         "Stop minimizing window under macOS."
         (interactive)
         (unless (and *is-a-mac*
                     window-system)
           (suspend-frame)))
       :custom
       (default-frame-alist
         . '((ns-transparent-titlebar . t)
             (ns-appearance           . light)
             (alpha                   . (80 . 75))
             (vertical-scroll-bars    . nil)
             (internal-border-width   . 24))))
   #+end_src

** ‰∏ªÈ¢òËÆæÂÆö
   #+begin_src emacs-lisp
     (add-to-list 'load-path (expand-file-name "emacs-nasy-theme" user-emacs-directory))
     (require 'nasy-theme)
     (load-theme 'nasy t)
   #+end_src
** Â∑•ÂÖ∑Ê†èËÆæÂÆö
   #+begin_src emacs-lisp
     (leaf tool-bar
       :tag "builtin"
       :bind
       (:tool-bar-map
	([copy]            . nil)
	([cut]             . nil)
	([dired]           . nil)
	([isearch-forward] . nil)
	([new-file]        . nil)
	([open-file]       . nil)
	([paste]           . nil)
	([save-buffer]     . nil)
	([undo]            . nil)
	([yank]            . nil)))
	;; ([dashboard-refresh-buffer]
	;;  . `(menu-item))))
   #+end_src

** ‰∏Ä‰∫õÂÖ≥‰∫éÁïåÈù¢ÁöÑÊèí‰ª∂
*** ÂΩ©ËôπÊã¨Âè∑
    #+begin_src emacs-lisp
      (leaf rainbow-delimiters
        :hook prog-mode-hook org-src-mode-hook
        :config
        (custom-set-faces
         '(rainbow-delimiters-base-face    ((t (:inherit nil :weight bold))))
         '(rainbow-delimiters-depth-1-face ((t (:inherit rainbow-delimiters-base-face :foreground "dark orange"))))
         '(rainbow-delimiters-depth-2-face ((t (:inherit rainbow-delimiters-base-face :foreground "DeepSkyBlue"))))
         '(rainbow-delimiters-depth-3-face ((t (:inherit rainbow-delimiters-base-face :foreground "YellowGreen"))))
         '(rainbow-delimiters-depth-4-face ((t (:inherit rainbow-delimiters-base-face :foreground "LimeGreen"))))
         '(rainbow-delimiters-depth-5-face ((t (:inherit rainbow-delimiters-base-face :foreground "dodger blue"))))
         '(rainbow-delimiters-depth-6-face ((t (:inherit rainbow-delimiters-base-face :foreground "MediumSlateBlue"))))
         '(rainbow-delimiters-depth-7-face ((t (:inherit rainbow-delimiters-base-face :foreground "blue violet"))))
         '(rainbow-delimiters-depth-8-face ((t (:inherit rainbow-delimiters-base-face :foreground "hot pink"))))
         '(rainbow-delimiters-depth-9-face ((t (:inherit rainbow-delimiters-base-face :foreground "DeepPink")))))
        :init (straight-use-package 'rainbow-delimiters))
    #+end_src

*** ÂØπÈΩêÁ∫ø
    #+begin_src emacs-lisp
      (when (graphic-p)
        (leaf highlight-indent-guides
          :hook (prog-mode-hook text-mode-hook org-mode-hook)
          :config
          (setq highlight-indent-guides-method 'bitmap)
          :init (straight-use-package 'highlight-indent-guides)))
    #+end_src

*** Dashboard
[[https://github.com/nasyxx/emacs.d/blob/master/%E8%94%93%E8%89%B8/%E5%BA%AD%E5%B0%9E/%E7%AF%87.org][ËîìËâ∏/Â∫≠Â∞û/ÁØá.org]]
#+begin_src emacs-lisp
  (leaf page-break-lines
    :hook
    (after-init-hook . global-page-break-lines-mode)
    (nasy/font-change-hook
     . (lambda ()
         (progn
           (nasy/change-char-width page-break-lines-char 2)
           (nasy/set-symbol ?‚ä∏ 18 nil))))
    :custom
    (page-break-lines-char . ?‚ä∏))
  
  (leaf dashboard
    :commands (dashboard-refresh-buffer
               dashboard-setup-startup-hook)
    :init (straight-use-package 'dashboard))
  
  (defun nasy/-set-dashboard-init-info (&rest _)
    (setq dashboard-init-info
          (let ((package-count 0) (time (emacs-init-time)))
            (setq package-count (+ (hash-table-size straight--profile-cache) package-count))
            (if (zerop package-count)
                (format "Emacs started in %s" time)
              (format "%d packages loaded in %s" package-count time)))))
  
  (defun nasy/-dashboard-items (_)
    (insert "\n")
    (widget-create 'item
                   :tag "ËøëÊúü (r)"
                   :action #'consult-recent-file
                   :mouse-face 'highlight
                   :button-face 'dashboard-heading
                   :button-prefix "üåì "
                   :button-suffix ""
                   :format "%[%t%]"
                   :help-echo "open recent files")
    (insert "\t")
    (widget-create 'item
                   :tag "Êõ∏Á±§ (b)"
                   :action #'consult-bookmark
                   :mouse-face 'highlight
                   :button-face 'dashboard-heading
                   :button-prefix "üîñ "
                   :button-suffix ""
                   :format "%[%t%]"
                   :help-echo "open bookmarks")
    (insert "\t")
    (widget-create 'item
                   :tag "È†ÖÁõÆ (p)"
                   :action #'projectile-switch-project
                   :mouse-face 'highlight
                   :button-face 'dashboard-heading
                   :button-prefix "üöÄ "
                   :button-suffix ""
                   :format "%[%t%]"
                   :help-echo "open projects")
    (insert "               \n"))
  
  
  (after-x 'dashboard
    (defun nasy/dashboard-refresh ()
      "Refresh dashboard buffer."
      (interactive)
      (unless (get-buffer dashboard-buffer-name)
        (generate-new-buffer "*dashboard*"))
      (dashboard-refresh-buffer)))
  
  (leaf dashboard
    :leaf-autoload nil
    :bind
    ("<f5>" . dashboard-refresh-buffer)
    (:dashboard-mode-map
     ("r"              . consult-recent-file)
     ("b"              . consult-bookmark)
     ("p"              . projectile-switch-project))
    :hook
    ((dashboard-mode-hook . (lambda () (setq-local tab-width 1)))
     (after-init-hook     . dashboard-setup-startup-hook)
     (after-init-hook     . dashboard-refresh-buffer))
    :custom
    (dashboard-items . '((n-items . t)))
    (dashboard-item-generators . '((n-items . nasy/-dashboard-items)))
    ((dashboard-center-content
      dashboard-set-heading-icons
      dashboard-set-init-info) . t)
    `(dashboard-startup-banner
      . ,(expand-file-name "n_icon.png" user-emacs-directory))
    :advice (:before dashboard-refresh-buffer nasy/-set-dashboard-init-info))
  
  (setq-default
   initial-scratch-message     (concat ";; Happy hacking, " user-login-name " - Emacs ‚ô• you!\n\n")
   dashboard-banner-logo-title (concat ";; Happy hacking, " user-login-name " - Emacs ‚ô• you!\n\n")
   )
#+end_src
* ÁºñËæëÂô®
  #+begin_src emacs-lisp
    ;; Ëá™Âä®Âä†ËΩΩÂ§ñÈÉ®‰øÆÊîπËøáÁöÑÊñá‰ª∂
    (global-auto-revert-mode 1)
    ;; ÂÖ≥Èó≠Ëá™Â∑±Áîü‰∫ßÁöÑ‰øùÂ≠òÊñá‰ª∂
    (setq auto-save-default nil)
    ;; ÂÖ≥Èó≠Ëá™Â∑±Áîü‰∫ßÁöÑÂ§á‰ªΩÊñá‰ª∂
    (setq make-backup-files nil)
    ;; ÈÄâ‰∏≠Êüê‰∏™Âå∫ÂüüÁªßÁª≠ÁºñËæëÂèØ‰ª•ÊõøÊç¢ÊéâËØ•Âå∫Âüü
    (delete-selection-mode 1)
    ;; ËÆæÁΩÆh Êñá‰ª∂ÈªòËÆ§‰∏∫c++Êñá‰ª∂
    (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
    ;; orgmode
    (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
    ;; without lock files
    (setq create-lockfiles nil)
    ;; y-or-n
    (fset 'yes-or-no-p 'y-or-n-p)
  #+end_src

* ÂåÖ

** Minions
#+begin_src emacs-lisp
  (leaf minions
    :config (minions-mode 1)
    :init (straight-use-package 'minions))
#+end_src
** Selectrum
#+begin_src emacs-lisp
  (leaf selectrum
    :config
    (selectrum-mode +1)
    :init (straight-use-package 'selectrum))
#+end_src

** Consult
#+begin_src emacs-lisp
  (leaf consult
    :init (straight-use-package 'consult))
#+end_src

** Orderless
#+begin_src emacs-lisp
  (leaf orderless
    :custom (completion-styles . '(orderless))
    :config (savehist-mode)
    :init (straight-use-package 'orderless))
#+end_src
** Projectile
   #+begin_src emacs-lisp
     (leaf projectile
       :config
       (projectile-mode +1)
       :init (straight-use-package 'projectile))
     
   #+end_src
** Company
   #+begin_src emacs-lisp
     (leaf company
       :hook
       (after-init-hook . global-company-mode)
       :init
       (setq company-tooltip-align-annotations t company-idle-delay 0.1 company-echo-delay 0
             company-minimum-prefix-length 2 company-require-match nil company-dabbrev-ignore-case
             nil company-dabbrev-downcase nil company-show-numbers t)
       :bind
       ((:company-active-map
         ("M-n" . nil)
         ("M-p" . nil)
         ("C-n" . company-select-next)
         ("C-p" . company-select-previous)))
       :init (straight-use-package 'company))
   #+end_src

** Lsp-mode
   #+begin_src emacs-lisp
     (leaf lsp-mode
       :commands lsp
       :init (straight-use-package 'lsp-mode))
   #+end_src

** Flycheck
   #+begin_src emacs-lisp
     (leaf flycheck
       :hook prog-mode-hook
       :init (straight-use-package 'flycheck))
   #+end_src

** Which-key
   #+begin_src emacs-lisp
     (leaf which-key
       :custom (which-key-allow-imprecise-window-fit . nil)
       :hook 'after-init-hook
       :init (straight-use-package 'which-key))
   #+end_src
** Org-babel
   #+begin_src emacs-lisp
   (custom-set-variables
      '(org-babel-load-languages (quote ((emacs-lisp . t) (haskell . t))))
      '(org-confirm-babel-evaluate nil))
   #+end_src
   
** Emacs-Rime
   #+begin_src emacs-lisp
     (leaf rime
       :bind
       (:rime-mode-map
        ("C-`"   . rime-send-keybinding)
        ("C-S-`" . rime-send-keybinding)
        ("C-,"   . rime-send-keybinding))
       (:rime-active-mode-map
        ("C-;"   . rime-send-keybinding)
        ("C-SPC" . rime-send-keybinding))
       :custom
       `(rime-emacs-module-header-root    . ,(expand-file-name "/opt/local/include"))
       `(rime-user-data-dir   . ,(expand-file-name "~/.config/rime"))
       `(rime-librime-root    . ,(expand-file-name "/opt/local"))
       (default-input-method  . "rime")
       (rime-cursor           . "À∞")
       (rime-show-candidate   . 'posframe)
       (rime-posframe-style   . 'vertical)
       (rime-show-preedit     . t)
       (rime-translate-keybindings
        . '("C-f"
            "C-b"
            "C-n"
            "C-p"
            "C-g"
            "C-`"
            "C-;"
            "C-SPC"
            "<left>"
            "<right>"
            "<up>"
            "<down>"
            "<prior>"
            "<next>"
            "<delete>"))
       :init (straight-use-package 'rime))
   #+end_src
** Exec-path-from-shell
   #+begin_src emacs-lisp
     (leaf exec-path-from-shell
       :config (exec-path-from-shell-initialize)
       :init (straight-use-package 'exec-path-from-shell))
   #+end_src

** Org-mode
   #+begin_src emacs-lisp
     (leaf org
       :config
       (setq org-startup-indented t)
       :custom
       (org-ellipsis . " ÔπÖ")
       (org-startup-folded    . 'content))
   #+end_src

** Org-static-blog
   #+begin_src emacs-lisp
     (leaf org-static-blog
       :config
       (setq org-static-blog-publish-title "Ethereal Horizon")
       (setq org-static-blog-publish-url "https://keke-cute.github.io/")
       (setq org-static-blog-publish-directory "~/Repos/keke-cute.github.io")
       (setq org-static-blog-posts-directory "~/Repos/keke-cute.github.io/posts")
       (setq org-static-blog-drafts-directory "~/Repos/keke-cute.github.io/drafts")
       (setq org-static-blog-enable-tags t)
       (setq org-static-blog-use-preview t)
       (setq org-export-with-toc nil)
       (setq org-export-with-section-numbers nil)
       (setq org-static-blog-page-header
             "<meta name=\"author\" content=\"keke\">
     <meta name=\"referrer\" content=\"no-referrer\">
     <link href= \"static/blog.css\" rel=\"stylesheet\" type=\"text/css\" />
     <link rel=\"icon\" href=\"static/favicon.ico\">")
       (setq org-static-blog-index-front-matter
             "<h1> Ethereal Horizon </h1>\n")
       (setq org-static-blog-page-preamble
             "<div class=\"header\">
       <a href=\"https://keke-cute.github.io\">Home</a>  <A href=\"https://keke-cute.github.io/emacs.html\">Emacs</a>
     </div>")
       :init (straight-use-package 'org-static-blog))
   #+end_src

** Org-superstar-mode
   #+begin_src emacs-lisp
     (leaf org-superstar
       :hook
       (org-mode-hook)
       (nasy/font-change-hook
        . (lambda ()
            (progn
              (nasy/set-symbol ?‚òØ 21 nil)
              (nasy/set-symbol ?‚úø 18 nil)
              (nasy/set-symbol ?‚ùÄ 16 nil)
              (nasy/set-symbol ?‚ú´ 15 nil)
              (nasy/set-symbol ?‚ú∏ 16 nil)
              (nasy/set-symbol ?‚óâ 16 nil)
              (nasy/set-symbol ?‚úº 12 nil)
              (nasy/set-symbol ?‚úö 12 nil)
              (nasy/set-symbol ?‚Åç 13 nil)
              (nasy/change-char-width ?‚òØ 2)
              (nasy/change-char-width ?‚úø 2)
              (nasy/change-char-width ?‚ùÄ 2)
              (nasy/change-char-width ?‚ú´ 2)
              (nasy/change-char-width ?‚ú∏ 2)
              (nasy/change-char-width ?‚óâ 2)
              (nasy/change-char-width ?‚úº 1)
              (nasy/change-char-width ?‚úö 1)
              (nasy/change-char-width ?‚Åç 1))))
       :custom
       ((org-superstar-special-todo-items . t)
        (org-superstar-headline-bullets-list
         . '("‚òØ"
             "‚úø"
             "‚ùÄ"
             "‚ú´"
             "‚ú∏"
             "‚óâ"))
        (org-superstar-item-bullet-alist
         . '((?* . ?‚úº)
             (?+ . ?‚úö)
             (?- . ?‚Åç))))
       :init (straight-use-package 'org-superstar))
   #+end_src

** Org-Roam
   #+begin_src emacs-lisp
     (straight-use-package '(org-roam :type git :host github :branch "v2"))
     
     (leaf org-roam
       :after org
       :commands
       (org-roam-buffer
        org-roam-setup
        org-roam-capture
        org-roam-node-find)
       :custom
       `(org-roam-directory . ,(expand-file-name "~/Repos/roam"))
       :config
       (org-roam-setup))
   #+end_src
** Magit
   #+begin_src emacs-lisp
     (straight-use-package 'magit)
   #+end_src
** Telega
   #+begin_src emacs-lisp
     (straight-use-package '(telega :type git :host github :branch "releases"))
   #+end_src
** Htmlize
   #+begin_src emacs-lisp
     (straight-use-package 'htmlize)
   #+end_src
** Hydra
   #+begin_src emacs-lisp
     (straight-use-package 'hydra)
     
     (after-x 'hydra
       (defhydra keke/main (global-map "<f13>")
         "My main hydra keymap"
         ("a" eshell "Terminal")
         ("g" telega "Telegram")
         ("m" magit-status "Git Status(Magit)")
         ("r" org-roam-node-find "Find Org-roam node")
         ("i" org-roam-node-insert "Insert Org-roam file")
         ("b" consult-bookmark "My Bookmarks")
         ("f" projectile-find-file "Find Current Project File")
         ("p" projectile-switch-project "Switch Project")
         ("k" (keke/getgnukstatus) "Gnuk Status")
         ("t" treemacs "Treemacs")
         ("," centaur-tabs-backward "Next Tabs")
         ("." centaur-tabs-forward "Up Tabs")
         ("T" treemacs-display-current-project-exclusively "Current Project in Treemacs")))
   #+end_src
** Treemacs
   #+begin_src emacs-lisp
     (leaf treemacs
       :bind (("M-O" . treemacs-select-window))
       :init (straight-use-package 'treemacs))
   #+end_src
** Ace-Window
   #+begin_src emacs-lisp
     (leaf ace-window
       :bind (("M-o" . ace-window))
       :init (straight-use-package 'ace-window))
   #+end_src   
** Dired-hacks
[[https://github.com/nasyxx/emacs.d/blob/master/%E8%94%93%E8%89%B8/%E6%9C%88%E5%87%BA/%E7%AF%87.org][ËîìËâ∏/ÊúàÂá∫/ÁØá.org]]
   #+begin_src emacs-lisp
     (leaf dired-hacks
       :init (straight-use-package 'dired-hacks))
   #+end_src
   Dired Filter:
   #+begin_src emacs-lisp
     (leaf dired-filter
       :bind
       (:dired-filter-map
	("p" . dired-filter-pop-all))
       :hook (dired-mode-hook
	      (dired-mode-hook . dired-filter-group-mode))
       :bind-keymap
       (:dired-filter-map
	("/" . dired-filter-mark-map))
       :custom
       (dired-filter-revert . 'never)
       (dired-filter-group-saved-groups
	. '(("default"
	     ("Git"
	      (directory . ".git")
	      (file . ".gitignore"))
	     ("Directory"
	      (directory))
	     ("PDF"
	      (extension . "pdf"))
	     ("LaTeX"
	      (extension "tex" "bib"))
	     ("Source"
	      (extension "c" "cpp" "hs" "rb" "py" "r" "cs" "el" "lisp" "html" "js" "css"))
	     ("Doc"
	      (extension "md" "rst" "txt"))
	     ("Org"
	      (extension . "org"))
	     ("Media"
	      (extension "ogg" "flv" "mpg" "avi" "mp4" "mp3" "mkv"))
	     ("Subtitle"
	      (extension . "ass"))
	     ("Archives"
	      (extension "zip" "rar" "gz" "bz2" "tar"))
	     ("Images"
	      (extension "jpg" "JPG" "webp" "png" "PNG" "jpeg" "JPEG" "bmp" "BMP" "TIFF" "tiff" "gif" "GIF"))))))
   #+end_src
   Dired Rainbow:
   #+begin_src emacs-lisp
     (leaf dired-rainbow
       :after dired  
       :commands dired
       :require t
       :defer-config
       (dired-rainbow-define html "#eb5286"
                             ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
       (dired-rainbow-define xml "#f2d024"
                             ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
       (dired-rainbow-define document "#9561e2"
                             ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
       (dired-rainbow-define markdown "#705438"
                             ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt" "ass"))
       (dired-rainbow-define database "#6574cd"
                             ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
       (dired-rainbow-define media "#de751f"
                             ("mp3" "mp4" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac" "mkv"))
       (dired-rainbow-define image "#f66d9b"
                             ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
       (dired-rainbow-define log "#c17d11"
                             ("log"))
       (dired-rainbow-define shell "#f6993f"
                             ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
       (dired-rainbow-define interpreted "#38c172"
                             ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
       (dired-rainbow-define compiled "#4dc0b5"
                             ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
       (dired-rainbow-define executable "#8cc4ff"
                             ("exe" "msi"))
       (dired-rainbow-define compressed "#51d88a"
                             ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
       (dired-rainbow-define packaged "#faad63"
                             ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
       (dired-rainbow-define encrypted "#ffed4a"
                             ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
       (dired-rainbow-define fonts "#6cb2eb"
                             ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
       (dired-rainbow-define partition "#e3342f"
                             ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
       (dired-rainbow-define vc "#0074d9"
                             ("git" "gitignore" "gitattributes" "gitmodules"))
       (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
       (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*"))
     
   #+end_src
   Dired Collapse:
   #+begin_src emacs-lisp
     (leaf dired-collapse
       :after dired
       :hook dired-mode-hook)
   #+end_src
* ÁºñÁ®ãËØ≠Ë®Ä

** Haskell
   #+begin_src emacs-lisp
     ;;(straight-use-package 'haskell-mode)
     ;;
     ;;(leaf haskell-mode
     ;;  :require t)
     ;;
     ;;(leaf inf-haskell
     ;;  :require t)
   #+end_src

** Golang
   #+begin_src emacs-lisp
     (leaf go-mode
       :hook
       (go-mode-hook . lsp)
       :init (straight-use-package 'go-mode))
   #+end_src
** Nix
   #+begin_src emacs-lisp
     (straight-use-package 'nix-mode)
   #+end_src

** Yaml
   #+begin_src emacs-lisp
     (straight-use-package 'yaml-mode)
   #+end_src
