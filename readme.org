#+title: My Emacs Configure
#+author: keke
#+email: liushike1997@gmail.com
#+date: <2020-10-13 Tue>
#+export_file_name: ~/Repos/keke-cute.github.io/blog/myemacsconf.html
#+options: creator:t author:t
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="me.css" />
[[https://raw.githubusercontent.com/keke-cute/.emacs.d/master/2020-10-11_17-31.png]]
- this is my curreent emacs config, old archive see other branch
- git clone me, and run:
#+begin_src shell
  git submodule update --init --recursive
#+end_src
* Straight.el
  #+begin_src emacs-lisp
    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))
  #+end_src
  #+begin_src emacs-lisp
    (straight-use-package 'use-package)
    (straight-use-package 'magit)
    (straight-use-package 'posframe)
    (straight-use-package 'htmlize)
  #+end_src
* Is A?
  #+begin_src emacs-lisp
    (defconst *is-a-mac* (eq system-type 'darwin))
    (defconst *is-a-linux* (eq system-type 'gnu/linux))
    (defun graphic-p ()
      (display-graphic-p))

    (if (string= (system-name) "KeaiGuix") ;; if
	(load-file "~/.emacs.d/etc/init-guix.el") ;; then
      (load-file "~/.emacs.d/etc/init-linux.el")) ;; else
  #+end_src
* UI
** Main UI
   #+begin_src emacs-lisp
     (when (graphic-p)
       ;;  transparent frame
       (add-to-list 'default-frame-alist'(ns-transparent-titlebar . t))
       (add-to-list 'default-frame-alist'(ns-appearance . dark))
       (add-to-list 'default-frame-alist'(alpha . (80 . 75)))
       (menu-bar-mode -1)
       (scroll-bar-mode -1)
       (global-linum-mode 1)
       (tool-bar-mode -1)
       (global-hl-line-mode t)
       (setq inhibit-splash-screen t)
       (setq org-startup-with-inline-images t)
       ;; default frame size
       ;;      (setq initial-frame-alist
       ;;	    '(
       ;;	      (width . 106)
       ;;	      (height . 56)
       ;;	      )))
       )
     ;;(display-time-mode 1)
     ;; ÊåáÂÆöÊ®°ÂºèÁ¶ÅÁî®Ë°åÂè∑
     (add-hook 'vterm-mode-hook 'my-inhibit-global-linum-mode)
     (add-hook 'eshell-mode-hook 'my-inhibit-global-linum-mode)
     (add-hook 'telega-root-mode-hook 'my-inhibit-global-linum-mode)
     (add-hook 'telega-chat-mode-hook 'my-inhibit-global-linum-mode)
     (defun my-inhibit-global-linum-mode ()
       "Counter-act `global-linum-mode'."
       (add-hook 'after-change-major-mode-hook
		 (lambda () (linum-mode 0))
		 :append :local))
     ;;üåàÊã¨Âè∑
     (straight-use-package 'rainbow-delimiters)
     (use-package rainbow-delimiters 
       :config
       ;; ËÆæÁΩÆÊØè‰∏ÄÁ∫ßÊã¨Âè∑ÁöÑÈ¢úËâ≤
       (set-face-foreground 'rainbow-delimiters-depth-1-face "orange red") 
       (set-face-foreground 'rainbow-delimiters-depth-2-face "gold") 
       (set-face-foreground 'rainbow-delimiters-depth-3-face "yellow") 
       (set-face-foreground 'rainbow-delimiters-depth-4-face "spring green") 
       (set-face-foreground 'rainbow-delimiters-depth-5-face "cyan") 
       (set-face-foreground 'rainbow-delimiters-depth-6-face "magenta") 
       (set-face-foreground 'rainbow-delimiters-depth-7-face "goldenrod") 
       (set-face-foreground 'rainbow-delimiters-depth-8-face "IndianRed1") 
       (set-face-foreground 'rainbow-delimiters-depth-9-face "ivory1") 
       (set-face-bold 'rainbow-delimiters-depth-1-face "t") 
       (set-face-bold 'rainbow-delimiters-depth-2-face "t") 
       (set-face-bold 'rainbow-delimiters-depth-3-face "t") 
       (set-face-bold 'rainbow-delimiters-depth-4-face "t") 
       (set-face-bold 'rainbow-delimiters-depth-5-face "t") 
       (set-face-bold 'rainbow-delimiters-depth-6-face "t") 
       (set-face-bold 'rainbow-delimiters-depth-7-face "t") 
       (set-face-bold 'rainbow-delimiters-depth-8-face "t") 
       (set-face-bold 'rainbow-delimiters-depth-9-face "t") 
       (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

     ;; 
     (straight-use-package 'highlight-indent-guides)
     (use-package highlight-indent-guides
       :hook ((prog-mode web-mode) . highlight-indent-guides-mode)
       :config
       (setq highlight-indent-guides-method (if window-system 'character 'nil))
       (setq highlight-indent-guides-responsive 'stack))
   #+end_src
** Font
   #+begin_src emacs-lisp
     ;;Â≠ó‰ΩìËÆæÁΩÆ
     (when (graphic-p)
       (let ((emacs-font-size 13)
	     (emacs-font-name "Rec Mono Duotone"))
	 (set-frame-font (format "%s-%s" (eval emacs-font-name) (eval emacs-font-size)) nil t)
	 (set-fontset-font (frame-parameter nil 'font) 'unicode (eval emacs-font-name)))
       (with-eval-after-load 'org
	 (defun org-buffer-face-mode-variable ()
	   (interactive)
	   (make-face 'width-font-face)
	   (set-face-attribute 'width-font-face nil :font "Sarasa Mono SC 15")
	   (setq buffer-face-mode-face 'width-font-face)
	   (buffer-face-mode))
	 (add-hook 'org-mode-hook 'org-buffer-face-mode-variable)))

     (if (version< "27.0" emacs-version)
	 (set-fontset-font
	  "fontset-default" 'unicode "Apple Color Emoji" nil 'prepend)
       (set-fontset-font
	t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend))
   #+end_src
** Theme & Modeline
   #+begin_src emacs-lisp
     ;; theme
     (use-package lazycat-theme
       :load-path "~/.emacs.d/site-lisp/lazycat-theme")
     (straight-use-package 'modus-operandi-theme)
     (straight-use-package 'modus-vivendi-theme)
     (straight-use-package 'circadian)

     (load-file "~/.emacs.d/site-lisp/nasy-theme.el")

     (use-package
       circadian
       :config
       ;; ÁªèÁ∫¨Â∫¶ÔºåÂèØ‰ª•Âú®https://www.latlong.net/Ëé∑ÂèñÔºåÈªòËÆ§ÊòØÂπøÂ∑ûÁöÑ
       (setq calendar-latitude 35.388779
	     calendar-longitude 116.084290)
       ;; sunrise ÁôΩÂ§©Áî®ÁöÑ‰∏ªÈ¢ò sunset Êôö‰∏äÁî®ÁöÑ‰∏ªÈ¢ò
       (setq circadian-themes '((:sunrise . nasy)
				(:sunset . nasy)))
       (circadian-setup))

     ;;(use-package awesome-tray
     ;;  :load-path "~/.emacs.d/site-lisp/awesome-tray"
     ;;  :init
     ;;  (require 'awesome-tray)
     ;;  (awesome-tray-mode 1))



     ;;(require 'subr-x)
     ;;(straight-use-package 'minions)
     ;;(defun mode-line-with-padding (text)
     ;;  "Return TEXT with padding on the left.
     ;;The padding pushes TEXT to the right edge of the mode-line."
     ;;  (let* ((font (face-attribute 'mode-line :font))
     ;;	 (glyph-list (font-get-glyphs font 0 (length text) text))
     ;;	 (len (cl-reduce (lambda (len glyph)
     ;;			   (+ len (aref glyph 4)))
     ;;			 glyph-list
     ;;			 :initial-value 0))
     ;;	 (padding (propertize
     ;;		   "-" 'display
     ;;		   `(space :align-to (- (+ right right-margin) (,len))))))
     ;;    (concat padding text)))
     ;;
     ;;(setq-default mode-line-format
     ;;	      (let* ((spaces
     ;;		      (propertize " " 'display '(space :width 1.5)))
     ;;		     (fringe (propertize
     ;;			      " " 'display '(space :width fringe)))
     ;;		     (percentage
     ;;		      '(format
     ;;			"%d%%" (/ (* (window-end) 100.0) (point-max)))))
     ;;		`(,fringe
     ;;		  (:eval (if (window-dedicated-p)
     ;;			     (concat "üîí" spaces) ""))
     ;;		  "%[%b%]"
     ;;		  ,spaces
     ;;		  ,(if (featurep 'minions)
     ;;		       'minions-mode-line-modes
     ;;		     'mode-line-modes)
     ;;		  ,spaces
     ;;		  (:eval
     ;;		   (cond (inhibit-read-only
     ;;			  ,(if (display-graphic-p) "‚Äì‚Äâœâ‚Äâ‚Äì" "-w-"))
     ;;			 ((buffer-modified-p)
     ;;			  ,(if (display-graphic-p) "Œ¶‚ÄâA‚ÄâŒ¶" "OAO"))
     ;;			 (t
     ;;			  ,(if (display-graphic-p) "Œ¶‚Äâœâ‚ÄâŒ¶" "OwO"))))
     ;;		  ,spaces
     ;;		  mode-line-misc-info
     ;;		  ,(if (display-graphic-p)
     ;;		       `(:eval (concat (mode-line-with-padding
     ;;					,percentage) "%%"))
     ;;		     `(:eval (concat ,spaces ,percentage "%%"))))))
   #+end_src
* Editor
  #+begin_src emacs-lisp
    ;; Ëá™Âä®Âä†ËΩΩÂ§ñÈÉ®‰øÆÊîπËøáÁöÑÊñá‰ª∂
    (global-auto-revert-mode 1)
    ;; ÂÖ≥Èó≠Ëá™Â∑±Áîü‰∫ßÁöÑ‰øùÂ≠òÊñá‰ª∂
    (setq auto-save-default nil)
    ;; ÂÖ≥Èó≠Ëá™Â∑±Áîü‰∫ßÁöÑÂ§á‰ªΩÊñá‰ª∂
    (setq make-backup-files nil)
    ;; ÈÄâ‰∏≠Êüê‰∏™Âå∫ÂüüÁªßÁª≠ÁºñËæëÂèØ‰ª•ÊõøÊç¢ÊéâËØ•Âå∫Âüü
    (delete-selection-mode 1)
    ;; ËÆæÁΩÆh Êñá‰ª∂ÈªòËÆ§‰∏∫c++Êñá‰ª∂
    (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
    ;; orgmode
    (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
    ;; without lock files
    (setq create-lockfiles nil)
    ;; y-or-n
    (fset 'yes-or-no-p 'y-or-n-p)
  #+end_src
* Package
** FlyCheck
   #+begin_src emacs-lisp
     (straight-use-package 'flycheck)
     (straight-use-package 'flycheck-posframe)

     (use-package flycheck
       :init (global-flycheck-mode))

     (use-package flycheck-posframe
       :after flycheck
       :config (add-hook 'flycheck-mode-hook #'flycheck-posframe-mode))
   #+end_src
** Company
   #+begin_src emacs-lisp
     (straight-use-package 'company)
     (straight-use-package 'company-box)
     (use-package company 
       :defer 2 
       :hook (after-init . global-company-mode) 
       :init (setq company-tooltip-align-annotations t company-idle-delay 0.1 company-echo-delay 0
		   company-minimum-prefix-length 2 company-require-match nil company-dabbrev-ignore-case
		   nil company-dabbrev-downcase nil company-show-numbers t) 
       :config 
       :bind (:map company-active-map
		   ("M-n" . nil) 
		   ("M-p" . nil) 
		   ("C-n" . #'company-select-next) 
		   ("C-p" . #'company-select-previous)))
   #+end_src
** Lsp
   #+begin_src emacs-lisp
     (straight-use-package 'lsp-mode)
     (straight-use-package 'lsp-ui)
     (use-package lsp-mode
       :commands lsp
       :custom
       (lsp-idle-delay 1200)
       (lsp-auto-guess-root nil)
       (lsp-file-watch-threshold 2000)
       (read-process-output-max (* 1024 1024))
       (lsp-eldoc-hook nil)
       (lsp-prefer-flymake nil)
       :bind (:map lsp-mode-map
		   ("C-c C-f" . lsp-format-buffer)
		   ("M-RET" . lsp-ui-sideline-apply-code-actions))
       :config
       (setq lsp-prefer-capf t))

     (use-package lsp-ui :commands lsp-ui-mode)

   #+end_src
** Ivy
   #+begin_src emacs-lisp
     (straight-use-package 'ivy)
     (straight-use-package 'swiper)
     (straight-use-package 'counsel)
     (straight-use-package 'ivy-posframe)

     (ivy-mode 1)
     (setq ivy-use-virtual-buffers t)
     (setq enable-recursive-minibuffers t)
     ;; enable this if you want `swiper' to use it
     ;; (setq search-default-mode #'char-fold-to-regexp)
     (global-set-key "\C-s" 'swiper)
     (global-set-key (kbd "C-c C-r") 'ivy-resume)
     (global-set-key (kbd "<f6>") 'ivy-resume)
     (global-set-key (kbd "M-x") 'counsel-M-x)
     (global-set-key (kbd "C-x C-f") 'counsel-find-file)
     (global-set-key (kbd "<f1> f") 'counsel-describe-function)
     (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
     (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
     (global-set-key (kbd "<f1> l") 'counsel-find-library)
     (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
     (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
     (global-set-key (kbd "C-c g") 'counsel-git)
     (global-set-key (kbd "C-c j") 'counsel-git-grep)
     (global-set-key (kbd "C-c k") 'counsel-ag)
     (global-set-key (kbd "C-x l") 'counsel-locate)
     (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
     (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
     ;; (use-package ivy-posframe
     ;;   :custom
     ;;   (ivy-posframe-font "Rec Mono Linear-16")
     ;;   (ivy-posframe-parameters
     ;;    '((left-fringe . 5)
     ;;      (right-fringe . 5)))
     ;;   (ivy-posframe-border-width 2)
     ;;   (ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
     ;;   :custom-face
     ;;   (ivy-posframe ((t (:background "#000000"))))
     ;;   (ivy-posframe-border ((t (:background "#6272a4"))))
     ;;   (ivy-posframe-cursor ((t (:background "#61bfff"))))
     ;;   :config
     ;;   (ivy-posframe-mode 1))
   #+end_src
** Which-key
   #+begin_src emacs-lisp
     (straight-use-package 'which-key)
     (use-package which-key
       :config
       (which-key-mode))
   #+end_src
** Ace-window
   #+begin_src emacs-lisp
     (straight-use-package 'ace-window)
     (global-set-key (kbd "M-o") 'ace-window)
     (setq aw-dispatch-always t)
   #+end_src
** Exec-path-from-shell
   #+begin_src emacs-lisp
     (straight-use-package 'exec-path-from-shell)
     (exec-path-from-shell-initialize)
   #+end_src
** Projectile
   #+begin_src emacs-lisp
     (straight-use-package 'projectile)
     (straight-use-package 'counsel-projectile )

     (use-package projectile
       :diminish projectile-mode
       :config (projectile-mode)
       :custom ((projectile-completion-system 'ivy))
       :bind-keymap
       ("C-c p" . projectile-command-map)
       :init
       ;; NOTE: Set this to the folder where you keep your Git repos!
       (when (file-directory-p "~/Projects/Code")
	 (setq projectile-project-search-path '("~/Projects/Code")))
       (setq projectile-switch-project-action #'projectile-dired))

     (use-package counsel-projectile
       :config (counsel-projectile-mode))
   #+end_src
** Yasnippet
   #+begin_src emacs-lisp
     (straight-use-package 'yasnippet)
     (straight-use-package 'yasnippet-snippets)
     (use-package yasnippet
       :commands
       (yas-reload-all)
       :init
       (add-hook 'prog-mode-hook #'yas-minor-mode))
   #+end_src
** Xah_Fly_Keys
   #+begin_src emacs-lisp
     (straight-use-package 'xah-fly-keys)
     (use-package xah-fly-keys
       :config
       (xah-fly-keys-set-layout 'qwerty)
       (xah-fly-keys 1))
     (define-key key-translation-map (kbd "ESC") (kbd "C-g"))
     (define-key xah-fly-w-keymap (kbd "o") 'xah-html-open-in-chrome-browser)
     (define-key xah-fly-w-keymap (kbd "1") 'delete-other-windows)
     (define-key xah-fly-w-keymap (kbd "t") 'treemacs)
     (define-key xah-fly-leader-key-map (kbd "p") 'projectile-command-map)
     (define-key xah-fly-leader-key-map (kbd "f") 'counsel-find-file)
     (straight-use-package 'xah-fly-keys)
     (use-package xah-fly-keys
       :config
       (xah-fly-keys-set-layout 'qwerty)
       (xah-fly-keys 1))
     (define-key key-translation-map (kbd "ESC") (kbd "C-g"))
     (define-key xah-fly-w-keymap (kbd "1") 'delete-other-windows)
     (define-key xah-fly-w-keymap (kbd "t") 'treemacs)
     (define-key xah-fly-leader-key-map (kbd "p") 'projectile-command-map)
     (define-key xah-fly-leader-key-map (kbd "s") 'save-buffer)
   #+end_src
* Languages
** Rust
   #+begin_src emacs-lisp
     (straight-use-package 'rust-mode)
     (use-package rust-mode
       :custom (lsp-rust-server 'rust-analyzer)
       :hook (rust-mode . lsp))
   #+end_src
** Go
   #+begin_src emacs-lisp
     (straight-use-package 'go-mode)
     (use-package rust-mode
       :hook (go-mode . lsp))
   #+end_src
