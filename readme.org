#+title: My Emacs Configure
#+author: keke
#+email: liushike1997@gmail.com
#+date: <2020-10-13 Tue>
#+export_file_name: ~/Src/keke-cute.github.io/blog/myemacsconf.html
#+options: creator:t author:t
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/m-dark.css" />
#+HTML_HEAD_EXTRA: <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Code+Pro:400,400i,600%7CSource+Sans+Pro:400,400i,600&amp;subset=latin-ext" />
#+HTML_HEAD_EXTRA: <meta name="viewport" content="width=device-width, initial-scale=1.0" />
#+OPTIONS: html-style:nil
[[https://raw.githubusercontent.com/keke-cute/.emacs.d/master/2020-10-11_17-31.png]]
- this is my curreent emacs config, old archive see other branch
- git clone me, and run:
#+begin_src shell
  git submodule update --init --recursive
#+end_src
* Straight.el
  #+begin_src emacs-lisp
    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))
  #+end_src
  #+begin_src emacs-lisp
    (straight-use-package 'use-package)
    (straight-use-package 'magit)
    (straight-use-package 'vterm)
    (straight-use-package 'terraform-mode)
    (straight-use-package 'posframe)
  #+end_src
* Is A?
  #+begin_src emacs-lisp
    (defconst *is-a-mac* (eq system-type 'darwin))
    (defconst *is-a-linux* (eq system-type 'gnu/linux))
  #+end_src
* Is graphic?
  #+begin_src emacs-lisp
    (defun graphic-p ()
      (display-graphic-p))
  #+end_src
* UI
** Main UI
   #+begin_src emacs-lisp
     (when (graphic-p)
       ;;  transparent frame
       (add-to-list 'default-frame-alist'(ns-transparent-titlebar . t))
       (add-to-list 'default-frame-alist'(ns-appearance . dark))
       (add-to-list 'default-frame-alist'(alpha . (80 . 75)))
       (menu-bar-mode -1)
       (scroll-bar-mode -1)
       (global-linum-mode 1)
       (tool-bar-mode -1)
       (global-hl-line-mode t)
       (setq inhibit-splash-screen t)
       (setq org-startup-with-inline-images t)
       ;; default frame size
       ;;      (setq initial-frame-alist
       ;;	    '(
       ;;	      (width . 106)
       ;;	      (height . 56)
       ;;	      )))
       )
     (display-time-mode 1)
     ;; 指定模式禁用行号
     (add-hook 'vterm-mode-hook 'my-inhibit-global-linum-mode)
     (add-hook 'eshell-mode-hook 'my-inhibit-global-linum-mode)
     (add-hook 'telega-root-mode-hook 'my-inhibit-global-linum-mode)
     (add-hook 'telega-chat-mode-hook 'my-inhibit-global-linum-mode)
     (defun my-inhibit-global-linum-mode ()
       "Counter-act `global-linum-mode'."
       (add-hook 'after-change-major-mode-hook
		 (lambda () (linum-mode 0))
		 :append :local))
   #+end_src
** Font
   #+begin_src emacs-lisp
     ;;字体设置
     (when (graphic-p)
       (let ((emacs-font-size 13)
	     (emacs-font-name "Rec Mono Linear"))
	 (set-frame-font (format "%s-%s" (eval emacs-font-name) (eval emacs-font-size)) nil t)
	 (set-fontset-font (frame-parameter nil 'font) 'unicode (eval emacs-font-name)))
       (with-eval-after-load 'org
	 (defun org-buffer-face-mode-variable ()
	   (interactive)
	   (make-face 'width-font-face)
	   (set-face-attribute 'width-font-face nil :font "Sarasa Mono SC 15")
	   (setq buffer-face-mode-face 'width-font-face)
	   (buffer-face-mode))
	 (add-hook 'org-mode-hook 'org-buffer-face-mode-variable)))

     (if (version< "27.0" emacs-version)
	 (set-fontset-font
	  "fontset-default" 'unicode "Apple Color Emoji" nil 'prepend)
       (set-fontset-font
	t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend))
   #+end_src
** Theme & Modeline
   #+begin_src emacs-lisp
     ;; theme
     (use-package lazycat-theme
       :load-path "~/.emacs.d/site-lisp/lazycat-theme")
     (straight-use-package 'modus-operandi-theme)
     (straight-use-package 'modus-vivendi-theme)
     (straight-use-package 'circadian)
     (use-package
       circadian
       :config
       ;; 经纬度，可以在https://www.latlong.net/获取，默认是广州的
       (setq calendar-latitude 35.388779
	     calendar-longitude 116.084290)
       ;; sunrise 白天用的主题 sunset 晚上用的主题
       (setq circadian-themes '((:sunrise . modus-operandi)
				(:sunset . modus-vivendi)))
       (circadian-setup))
     ;; mode-line
     ;; (use-package awesome-tray
     ;;   :load-path "~/.emacs.d/site-lisp/awesome-tray"
     ;;   :init
     ;;   (require 'awesome-tray)
     ;;   (awesome-tray-mode 1))
   #+end_src
* Editor
  #+begin_src emacs-lisp
    ;; 自动加载外部修改过的文件
    (global-auto-revert-mode 1)
    ;; 关闭自己生产的保存文件
    (setq auto-save-default nil)
    ;; 关闭自己生产的备份文件
    (setq make-backup-files nil)
    ;; 选中某个区域继续编辑可以替换掉该区域
    (delete-selection-mode 1)
    ;; 设置h 文件默认为c++文件
    (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
    ;; orgmode
    (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
    ;; without lock files
    (setq create-lockfiles nil)
    ;; y-or-n
    (fset 'yes-or-no-p 'y-or-n-p)
  #+end_src
* Package
** FlyCheck
   #+begin_src emacs-lisp
     (straight-use-package 'flycheck)
     (straight-use-package 'flycheck-posframe)

     (use-package flycheck
       :init (global-flycheck-mode))

     (use-package flycheck-posframe
       :after flycheck
       :config (add-hook 'flycheck-mode-hook #'flycheck-posframe-mode))
   #+end_src
** Company
   #+begin_src emacs-lisp
     (straight-use-package 'company)
     (straight-use-package 'company-box)
     (use-package company 
       :defer 2 
       :hook (after-init . global-company-mode) 
       :init (setq company-tooltip-align-annotations t company-idle-delay 0.1 company-echo-delay 0
		   company-minimum-prefix-length 2 company-require-match nil company-dabbrev-ignore-case
		   nil company-dabbrev-downcase nil company-show-numbers t) 
       :config 
       :bind (:map company-active-map
		   ("M-n" . nil) 
		   ("M-p" . nil) 
		   ("C-n" . #'company-select-next) 
		   ("C-p" . #'company-select-previous)))
   #+end_src
** Lsp(include go)
   #+begin_src emacs-lisp
     (straight-use-package 'lsp-mode)
     (straight-use-package 'go-mode)
     (straight-use-package 'lsp-ui)
     (use-package lsp-mode
       :commands lsp
       :hook ((go-mode) . lsp)
       :custom
       (lsp-idle-delay 1200)
       (lsp-auto-guess-root nil)
       (lsp-file-watch-threshold 2000)
       (read-process-output-max (* 1024 1024))
       (lsp-eldoc-hook nil)
       (lsp-prefer-flymake nil)
       :bind (:map lsp-mode-map
		   ("C-c C-f" . lsp-format-buffer)
		   ("M-RET" . lsp-ui-sideline-apply-code-actions))
       :config
       (setq lsp-prefer-capf t))

     (use-package lsp-ui :commands lsp-ui-mode)

   #+end_src
** Ivy
   #+begin_src emacs-lisp
     (straight-use-package 'ivy)
     (straight-use-package 'swiper)
     (straight-use-package 'counsel)
     (straight-use-package 'ivy-posframe)

     (ivy-mode 1)
     (setq ivy-use-virtual-buffers t)
     (setq enable-recursive-minibuffers t)
     ;; enable this if you want `swiper' to use it
     ;; (setq search-default-mode #'char-fold-to-regexp)
     (global-set-key "\C-s" 'swiper)
     (global-set-key (kbd "C-c C-r") 'ivy-resume)
     (global-set-key (kbd "<f6>") 'ivy-resume)
     (global-set-key (kbd "M-x") 'counsel-M-x)
     (global-set-key (kbd "C-x C-f") 'counsel-find-file)
     (global-set-key (kbd "<f1> f") 'counsel-describe-function)
     (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
     (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
     (global-set-key (kbd "<f1> l") 'counsel-find-library)
     (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
     (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
     (global-set-key (kbd "C-c g") 'counsel-git)
     (global-set-key (kbd "C-c j") 'counsel-git-grep)
     (global-set-key (kbd "C-c k") 'counsel-ag)
     (global-set-key (kbd "C-x l") 'counsel-locate)
     (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
     (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
     ;; (use-package ivy-posframe
     ;;   :custom
     ;;   (ivy-posframe-font "Rec Mono Linear-16")
     ;;   (ivy-posframe-parameters
     ;;    '((left-fringe . 5)
     ;;      (right-fringe . 5)))
     ;;   (ivy-posframe-border-width 2)
     ;;   (ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
     ;;   :custom-face
     ;;   (ivy-posframe ((t (:background "#000000"))))
     ;;   (ivy-posframe-border ((t (:background "#6272a4"))))
     ;;   (ivy-posframe-cursor ((t (:background "#61bfff"))))
     ;;   :config
     ;;   (ivy-posframe-mode 1))
   #+end_src
** Which-key
   #+begin_src emacs-lisp
     (straight-use-package 'which-key)
     (use-package which-key
       :config
       (which-key-mode))
   #+end_src
** Emacs-rime
   #+begin_src emacs-lisp
     (when (graphic-p)
       (when *is-a-linux*
	 (use-package rime
	   :straight (rime :type git
			   :host github
			   :repo "DogLooksGood/emacs-rime"
			   :files ("*.el" "Makefile" "lib.c"))
	   :custom
	   (default-input-method "rime")
	   (rime-show-candidate 'posframe))))
   #+end_src
** Ace-window
   #+begin_src emacs-lisp
     (straight-use-package 'ace-window)
     (global-set-key (kbd "M-o") 'ace-window)
     (setq aw-dispatch-always t)
   #+end_src
** Exec-path-from-shell
   #+begin_src emacs-lisp
     (straight-use-package 'exec-path-from-shell)
     (exec-path-from-shell-initialize)
   #+end_src
** Xah-run-current-file
   #+begin_src emacs-lisp
     (defvar xah-run-current-file-before-hook nil "Hook for `xah-run-current-file'. Before the file is run.")

     (defvar xah-run-current-file-after-hook nil "Hook for `xah-run-current-file'. After the file is run.")

     (defun xah-run-current-go-file ()
       "Run or build current golang file.

     To build, call `universal-argument' first.

     Version 2018-10-12"
       (interactive)
       (when (not (buffer-file-name)) (save-buffer))
       (when (buffer-modified-p) (save-buffer))
       (let* (
	      ($outputb "*xah-run output*")
	      (resize-mini-windows nil)
	      ($fname (buffer-file-name))
	      ($fSuffix (file-name-extension $fname))
	      ($progName "go")
	      $cmdStr)
	 (setq $cmdStr (concat $progName " \""   $fname "\" &"))
	 (if current-prefix-arg
	     (progn
	       (setq $cmdStr (format "%s build \"%s\" " $progName $fname)))
	   (progn
	     (setq $cmdStr (format "%s run \"%s\" &" $progName $fname))))
	 (progn
	   (message "running %s" $fname)
	   (message "%s" $cmdStr)
	   (shell-command $cmdStr $outputb )
	   ;;
	   )))

     (defun xah-run-current-file ()
       "Execute the current file.
     For example, if the current buffer is x.py, then it'll call 「python x.py」 in a shell.
     Output is printed to buffer “*xah-run output*”.

     The file can be Emacs Lisp, PHP, Perl, Python, Ruby, JavaScript, TypeScript, golang, Bash, Ocaml, Visual Basic, TeX, Java, Clojure.
     File suffix is used to determine what program to run.

     If the file is modified or not saved, save it automatically before run.

     URL `http://ergoemacs.org/emacs/elisp_run_current_file.html'
     Version 2020-09-06"
       (interactive)
       (let (
	     ($outBuffer "*xah-run output*")
	     (resize-mini-windows nil)
	     ($suffixMap
	      ;; (‹extension› . ‹shell program name›)
	      `(
		("php" . "php")
		("pl" . "perl")
		("py" . "python")
		("py3" . ,(if (string-equal system-type "windows-nt") "c:/Python32/python.exe" "python3"))
		("rb" . "ruby")
		("go" . "go run")
		("hs" . "runhaskell")
		;; ("js" . "node")
		("js" . "deno run")
		("mjs" . "node --experimental-modules ")
		("ts" . "tsc") ; TypeScript
		("tsx" . "tsc")
		("sh" . "bash")
		("clj" . "java -cp ~/apps/clojure-1.6.0/clojure-1.6.0.jar clojure.main")
		("rkt" . "racket")
		("ml" . "ocaml")
		("vbs" . "cscript")
		("tex" . "pdflatex")
		("latex" . "pdflatex")
		("java" . "javac")
		;; ("pov" . "/usr/local/bin/povray +R2 +A0.1 +J1.2 +Am2 +Q9 +H480 +W640")
		))
	     $fname
	     $fSuffix
	     $progName
	     $cmdStr)
	 (when (not (buffer-file-name)) (save-buffer))
	 (when (buffer-modified-p) (save-buffer))
	 (setq $fname (buffer-file-name))
	 (setq $fSuffix (file-name-extension $fname))
	 (setq $progName (cdr (assoc $fSuffix $suffixMap)))
	 (setq $cmdStr (concat $progName " \""   $fname "\" &"))
	 (run-hooks 'xah-run-current-file-before-hook)
	 (cond
	  ((string-equal $fSuffix "el")
	   (load $fname))
	  ((or (string-equal $fSuffix "ts") (string-equal $fSuffix "tsx"))
	   (if (fboundp 'xah-ts-compile-file)
	       (progn
		 (xah-ts-compile-file current-prefix-arg))
	     (if $progName
		 (progn
		   (message "Running")
		   (shell-command $cmdStr $outBuffer ))
	       (error "No recognized program file suffix for this file."))))
	  ((string-equal $fSuffix "go")
	   (xah-run-current-go-file))
	  ((string-equal $fSuffix "java")
	   (progn
	     (shell-command (format "javac %s" $fname) $outBuffer )
	     (shell-command (format "java %s" (file-name-sans-extension
					       (file-name-nondirectory $fname))) $outBuffer )))
	  (t (if $progName
		 (progn
		   (message "Running")
		   (shell-command $cmdStr $outBuffer ))
	       (error "No recognized program file suffix for this file."))))
	 (run-hooks 'xah-run-current-file-after-hook)))
   #+end_src
** Telega
   #+begin_src emacs-lisp
     (straight-use-package 'telega)
   #+end_src
** Projectile
   #+begin_src emacs-lisp
     (straight-use-package 'projectile)
     (straight-use-package 'counsel-projectile )

     (use-package projectile
       :diminish projectile-mode
       :config (projectile-mode)
       :custom ((projectile-completion-system 'ivy))
       :bind-keymap
       ("C-c p" . projectile-command-map)
       :init
       ;; NOTE: Set this to the folder where you keep your Git repos!
       (when (file-directory-p "~/Projects/Code")
	 (setq projectile-project-search-path '("~/Projects/Code")))
       (setq projectile-switch-project-action #'projectile-dired))

     (use-package counsel-projectile
       :config (counsel-projectile-mode))
   #+end_src
* Exwm
  #+begin_src emacs-lisp
    (if (string= (system-name) "KeaiGuixMi")
	(load-file "~/.emacs.d/etc/init-exwm.el"))
  #+end_src
